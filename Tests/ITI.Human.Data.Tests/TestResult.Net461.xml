- Info: Switching console log ON.
        Folder 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\TestStores' has been cleaned up.
> Info: Accessing null StObj map.
|  > Info: Invoking StObjMapLoading event.
|  |  - Info: File 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461\CK.StObj.AutoAssembly.dll' does not exist. Running StObjSetup to create it.
|  |  > Info: Running StObjSetup.
|  |  |  > Info: Ensuring database 'Database:ITIHuman, Collation:Latin1_General_100_BIN2, CompatibilityLevel:140'.
|  |  |  - Info: Using 'CKSetup/DefaultBinPaths' = {CKSetupAutoTargetProjectBinFolder}
|  |  |          No 'CKSetup/DefaultPreferredTargetRuntimes' configuration, using this CK.Testing.CKSetup assembly Net461 to consider: Net461, Net462, Net47, Net471, Net472.
|  |  |          BinPath '{CKSetupAutoTargetProjectBinFolder}' resolved to: C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461.
|  |  |          Using store 'C:\Users\dizy9\AppData\Local\CKSetupStore'.
|  |  |          Using remote 'https://cksetup.invenietis.net/'.
|  |  |  - Trace: Opened store with 14 components.
|  |  |           Local store opened on : 'C:\Users\dizy9\AppData\Local\CKSetupStore'.
|  |  |  > Trace: Creating client remote store on 'https://cksetup.invenietis.net/'.
|  |  |  > Info: Running Setup.
|  |  |  |  > Trace: Initializing SetupContext (ignoring signatures).
|  |  |  |  |  - Info: <Root>
|  |  |  |  |            <CKSetup>
|  |  |  |  |              <PreferredTargetRuntimes>Net461;Net462;Net47;Net471;Net472</PreferredTargetRuntimes>
|  |  |  |  |              <BinPaths>
|  |  |  |  |                <BinPath>C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461</BinPath>
|  |  |  |  |              </BinPaths>
|  |  |  |  |              <Dependencies />
|  |  |  |  |              <EngineAssemblyQualifiedName>CK.Setup.StObjEngine, CK.StObj.Engine</EngineAssemblyQualifiedName>
|  |  |  |  |            </CKSetup>
|  |  |  |  |            <Configuration>
|  |  |  |  |              <AppContextAssemblyGeneratedDirectoryTarget>C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461</AppContextAssemblyGeneratedDirectoryTarget>
|  |  |  |  |              <GenerateSourceFiles>true</GenerateSourceFiles>
|  |  |  |  |              <Assemblies />
|  |  |  |  |              <Types />
|  |  |  |  |              <ExternalSingletonTypes />
|  |  |  |  |              <ExcludedTypes />
|  |  |  |  |              <Aspect Type="CK.Setup.SetupableAspectConfiguration, CK.Setupable.Model" Version="1" />
|  |  |  |  |              <Aspect Type="CK.Setup.SqlSetupAspectConfiguration, CK.SqlServer.Setup.Model">
|  |  |  |  |                <Databases />
|  |  |  |  |                <DefaultDatabaseConnectionString>Data Source=localhost\SQLEXPRESS01;Initial Catalog=ITIHuman;Integrated Security=True</DefaultDatabaseConnectionString>
|  |  |  |  |                <GlobalResolution>true</GlobalResolution>
|  |  |  |  |              </Aspect>
|  |  |  |  |            </Configuration>
|  |  |  |  |          </Root>
|  |  |  |  |          Configuration BasePath is empty: using current directory 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461'.
|  |  |  |  |  > Info: Reading binary folders.
|  |  |  |  |  |  > Info: Reading files from 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461'.
|  |  |  |  |  < 1 folders read.
|  |  |  |  |  - Info: Created temporary Working Directory: C:\Users\dizy9\AppData\Local\Temp\CKSetup2019-01-18 20h32.43.7331595\.
|  |  |  |  > Info: Resolving runtime support for 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461\'.
|  |  |  |  |  > Info: Creating runtime dependencies resolver for C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461\.
|  |  |  |  |  |  - Info: Found Models: CK.Setupable.Model/8.0.1--0046-develop/Net461/, CK.SqlServer.Setup.Model/8.0.1--0046-develop/Net461/, CK.StObj.Model/8.0.1--0046-develop/Net461/
|  |  |  |  |  |          Found ModelDependents: CK.DB.Actor (Net461), CK.DB.Auth (Net461), CK.DB.User.UserGitHub (Net461), CK.DB.User.UserPassword (Net461), ITI.Human.Data (Net461)
|  |  |  |  |  |  > Info: Selecting TargetRuntime.
|  |  |  |  |  |  |  - Info: Multiple possible runtime: Net461, Net462, Net47, Net471, Net472.
|  |  |  |  |  |  |          Preferred target runtimes is: Net461, Net462, Net47, Net471, Net472.
|  |  |  |  |  |  < Selected runtime: Net461.
|  |  |  |  |  > Info: Initializing root dependencies.
|  |  |  |  |  |  - Trace: Resolved required dependency -> CK.Setupable.Runtime/8.0.1--0046-develop to local CK.Setupable.Runtime/8.0.1--0046-develop/Net461/.
|  |  |  |  |  |           Resolved required dependency -> CK.SqlServer.Setup.Runtime/8.0.1--0046-develop to local CK.SqlServer.Setup.Runtime/8.0.1--0046-develop/Net461/.
|  |  |  |  |  |           Resolved required dependency -> CK.StObj.Runtime/8.0.1--0046-develop to local CK.StObj.Runtime/8.0.1--0046-develop/Net461/.
|  |  |  |  |  |           Resolved required dependency -> CKSetup.Runner/8.0.1--0029-develop to local CKSetup.Runner/8.0.1--0029-develop/Net461/.
|  |  |  |  |  > Info: Resolving dependencies.
|  |  |  |  |  |  - Trace: Resolved required dependency -> CK.Setupable.Engine/8.0.1--0046-develop to local CK.Setupable.Engine/8.0.1--0046-develop/Net461/.
|  |  |  |  |  |           Resolved required dependency -> CK.SqlServer.Setup.Engine/8.0.1--0046-develop to local CK.SqlServer.Setup.Engine/8.0.1--0046-develop/Net461/.
|  |  |  |  |  |           Resolved required dependency -> CK.StObj.Engine/8.0.1--0046-develop to local CK.StObj.Engine/8.0.1--0046-develop/Net461/.
|  |  |  |  |  > Info: Selected 156 setup files.
|  |  |  |  > Info: Copying files to 'C:\Users\dizy9\AppData\Local\Temp\CKSetup2019-01-18 20h32.43.7331595\'.
|  |  |  |  > Info: Copying 115 files from bin folders.
|  |  |  |  < Skipped 99 file(s).
|  |  |  |  > Info: Generating CKSetup.Runner.Config.xml file.
|  |  |  |  |  - Info: <Configuration>
|  |  |  |  |            <AppContextAssemblyGeneratedDirectoryTarget>C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461</AppContextAssemblyGeneratedDirectoryTarget>
|  |  |  |  |            <GenerateSourceFiles>true</GenerateSourceFiles>
|  |  |  |  |            <Assemblies />
|  |  |  |  |            <Types />
|  |  |  |  |            <ExternalSingletonTypes />
|  |  |  |  |            <ExcludedTypes />
|  |  |  |  |            <Aspect Type="CK.Setup.SetupableAspectConfiguration, CK.Setupable.Model" Version="1" />
|  |  |  |  |            <Aspect Type="CK.Setup.SqlSetupAspectConfiguration, CK.SqlServer.Setup.Model">
|  |  |  |  |              <Databases />
|  |  |  |  |              <DefaultDatabaseConnectionString>Data Source=localhost\SQLEXPRESS01;Initial Catalog=ITIHuman;Integrated Security=True</DefaultDatabaseConnectionString>
|  |  |  |  |              <GlobalResolution>true</GlobalResolution>
|  |  |  |  |            </Aspect>
|  |  |  |  |            <CKSetup>
|  |  |  |  |              <BasePath>C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461</BasePath>
|  |  |  |  |              <EngineAssemblyQualifiedName>CK.Setup.StObjEngine, CK.StObj.Engine</EngineAssemblyQualifiedName>
|  |  |  |  |              <RunSignature>1c199dd5ae75c4d8c3fe2da0ae511cc1bf89ccac</RunSignature>
|  |  |  |  |              <BinPaths>
|  |  |  |  |                <BinPath BinPath="C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461\">
|  |  |  |  |                  <Model>CK.Setupable.Model</Model>
|  |  |  |  |                  <Model>CK.SqlServer.Setup.Model</Model>
|  |  |  |  |                  <Model>CK.StObj.Model</Model>
|  |  |  |  |                  <ModelDependent>CK.DB.Actor</ModelDependent>
|  |  |  |  |                  <ModelDependent>CK.DB.Auth</ModelDependent>
|  |  |  |  |                  <ModelDependent>CK.DB.User.UserGitHub</ModelDependent>
|  |  |  |  |                  <ModelDependent>CK.DB.User.UserPassword</ModelDependent>
|  |  |  |  |                  <ModelDependent>CK.SqlServer</ModelDependent>
|  |  |  |  |                  <ModelDependent>ITI.Human.Data</ModelDependent>
|  |  |  |  |                </BinPath>
|  |  |  |  |              </BinPaths>
|  |  |  |  |            </CKSetup>
|  |  |  |  |          </Configuration>
|  |  |  |  > Info: Launching CKSetup.Runner process.
|  |  |  |  |  > Trace: C:\Users\dizy9\AppData\Local\Temp\CKSetup2019-01-18 20h32.43.7331595\CKSetup.Runner.exe  /silent /logPipe:2208
|  |  |  |  |  |  > Info: Starting CKSetup.Runner .NETFramework,Version=v4.6.1 - 8.0.1--ci.29.develop (8.0.1--0029-develop) - SHA1: 3113e0abf25593fedb4c6c44b659b7e3b3b854ce - CommitDate: 2018-10-24 06:50:32Z
|  |  |  |  |  |  |  > Info: Applying CKSetup configuration.
|  |  |  |  |  |  |  |  - Info: Handling 1 BinPath(s).
|  |  |  |  |  |  |  > Info: Validating configuration.
|  |  |  |  |  |  |  > Trace: Creating and configuring 2 aspect(s).
|  |  |  |  |  |  |  |  > Trace: Configuring aspect 'CK.Setup.SetupableAspect'.
|  |  |  |  |  |  |  |  > Trace: Configuring aspect 'CK.SqlServer.Setup.SqlSetupAspect'.
|  |  |  |  |  |  |  |  |  > Info: Connection to Data Source=localhost\SQLEXPRESS01;Initial Catalog=ITIHuman;Integrated Security=True.
|  |  |  |  |  |  |  |  |  |  - Info: Connected to database.
|  |  |  |  |  |  |  |  |  - Info: Registering SqlVersionedItemReader on the default database as the version reader.
|  |  |  |  |  |  |  |  |          Registering SqlVersionedItemWriter on the default database as the version writer.
|  |  |  |  |  |  |  |  |          Registering SqlSetupSessionMemoryProvider on the default database as the memory provider.
|  |  |  |  |  |  |  |  > Info: Executing initial 1 deferred actions.
|  |  |  |  |  |  |  |  < Executed 1 actions.
|  |  |  |  |  |  |  |  - Info: No explicit ISimpleObjectActivator has been registered. Using a default SimpleObjectActivator.
|  |  |  |  |  |  |  > Info: Building StObj objects.
|  |  |  |  |  |  |  |  > Info: Registering types.
|  |  |  |  |  |  |  |  |  > Trace: Registering 9 assemblies.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.Setupable.Model'.
|  |  |  |  |  |  |  |  |  |  < 16 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.SqlServer.Setup.Model'.
|  |  |  |  |  |  |  |  |  |  < 17 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.StObj.Model'.
|  |  |  |  |  |  |  |  |  |  < 24 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.DB.Actor'.
|  |  |  |  |  |  |  |  |  |  < 6 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.DB.Auth'.
|  |  |  |  |  |  |  |  |  |  < 13 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.DB.User.UserGitHub'.
|  |  |  |  |  |  |  |  |  |  < 7 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.DB.User.UserPassword'.
|  |  |  |  |  |  |  |  |  |  < 5 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'CK.SqlServer'.
|  |  |  |  |  |  |  |  |  |  < 22 types(s) registered.
|  |  |  |  |  |  |  |  |  |  > Trace: Registering assembly 'ITI.Human.Data'.
|  |  |  |  |  |  |  |  |  |  < 30 types(s) registered.
|  |  |  |  |  |  |  |  |  > Trace: Explicitly registering IPoco interfaces, or Ambient Contract or Service classes: handling 0 type(s).
|  |  |  |  |  |  |  |  |  - Info: Explicitly registering 'CK.SqlServer.Setup.SqlDefaultDatabase, CK.SqlServer.Setup.Model, Version=8.0.0.0, Culture=neutral, PublicKeyToken=731c291b31fb8d27'.
|  |  |  |  |  |  |  |  > Info: Resolving StObj dependency graph.
|  |  |  |  |  |  |  |  |  > Info: Initializing object graph.
|  |  |  |  |  |  |  |  |  |  > Info: Collecting Ambient Contracts, Services, Type structure and Poco.
|  |  |  |  |  |  |  |  |  |  |  > Info: Static Type analysis.
|  |  |  |  |  |  |  |  |  |  |  |  > Info: Creating Poco Types and PocoFactory.
|  |  |  |  |  |  |  |  |  |  |  |  > Info: Ambient contracts handling.
|  |  |  |  |  |  |  |  |  |  |  |  > Info: Ambient services handling.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Analysing 1 Service class hierarchies.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  - Trace: Found 1 unambiguous paths.
|  |  |  |  |  |  |  |  |  |  |  |  |  - Info: 2 Service interfaces with 1 roots and 1 interface leaves.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Collector summary:
|  |  |  |  |  |  |  |  |  |  |  |  > Trace: Ambient Contracts: 53 mappings for 43 concrete paths.
|  |  |  |  |  |  |  |  |  |  |  |  > Trace: Ambient Services: 1 most specialized interfaces and 1 concrete paths.
|  |  |  |  |  |  |  |  |  |  > Info: Creating final objects and configuring items.
|  |  |  |  |  |  |  |  |  |  < 43 items configured.
|  |  |  |  |  |  |  |  |  > Info: Topological graph ordering.
|  |  |  |  |  |  |  |  |  |  > Info: Preparing dependent items.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.SqlServer.Setup.SqlDefaultDatabase'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Group
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Actor.ActorProfileTable'.
|  |  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Actor.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Actor.ActorTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Actor.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Actor.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Auth.AuthProviderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.Auth.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.User.UserGitHub.Package'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.User.UserGitHub.UserGitHubTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.User.UserPassword.Package'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK.DB.User.UserPassword.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ClassroomTable'.
|  |  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OPCurrentStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OPPaymentStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderCreditTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderedProductUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderFinalDueTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderPaymentTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProductTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProjectMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProjectRankTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProjectTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProjectTypeTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.ProjectVotesTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SchoolMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SchoolStatusTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SemesterTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SLPCreditStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SLPStockUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.SLPUnitPriceUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.StorageLinkedProductUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.StorageTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.StudentTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.UpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.UserAvatarsTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.UserBalanceTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'ITI.Human.Data.UserDetailsTable'.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Container
|  |  |  |  |  |  |  |  |  |  |  > Trace: Preparing 'CK._g.poco.Factory'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Since ItemKind is not specified on this base class ('CK._g.poco.Factory'), it defaults to SimpleItem. It should be explicitly set to either SimpleItem, Group or Container.
|  |  |  |  |  |  |  |  |  |  |  < ItemKind is Item
|  |  |  |  |  |  |  |  |  |  > Info: Resolving PreConstruct and PostBuild properties.
|  |  |  |  |  |  |  |  |  > Info: Finalizing graph.
|  |  |  |  |  |  |  |  |  |  > Info: Calling StObjConstruct.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK._g.poco.Factory'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.SqlServer.Setup.SqlDefaultDatabase'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Actor.Package'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Actor.ActorTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Actor.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Actor.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Actor.ActorProfileTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Auth.Package'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.Auth.AuthProviderTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.User.UserGitHub.Package'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.User.UserPassword.Package'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.User.UserGitHub.UserGitHubTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'CK.DB.User.UserPassword.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.Package'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ClassroomTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProductTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProjectRankTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProjectTypeTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SchoolStatusTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.UpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.UserAvatarsTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.UserDetailsTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SchoolMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SemesterTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProjectTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.StudentTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProjectMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.ProjectVotesTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.StorageTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.UserBalanceTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderFinalDueTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.StorageLinkedProductUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderCreditTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderedProductUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OrderPaymentTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SLPCreditStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SLPStockUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.SLPUnitPriceUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OPCurrentStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Constructing 'ITI.Human.Data.OPPaymentStateUpdateTrackTable'.
|  |  |  |  |  |  |  |  |  |  > Info: Setting PostBuild properties.
|  |  |  |  |  |  |  |  |  > Info: Service handling.
|  |  |  |  |  |  |  |  |  |  - Trace: 1 Service families found.
|  |  |  |  |  |  |  > Info: Running Aspects.
|  |  |  |  |  |  |  |  > Info: Aspect: CK.Setup.SetupableAspect.
|  |  |  |  |  |  |  |  |  > Info: Creating Setup Items from Structured Objects.
|  |  |  |  |  |  |  |  |  |  > Info: Building setupable items from 43 Structure Objects (calling IStObjSetupConfigurator.ConfigureDependentItem and IStObjSetupItemFactory.CreateDependentItem for each of them).
|  |  |  |  |  |  |  |  |  |  |  - Info: SqlPackage 'CK.DB.Actor.Package' uses its own full name as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.Actor.ActorTable' uses 'CK.ActorTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.Actor.GroupTable' uses 'CK.GroupTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.Actor.UserTable' uses 'CK.UserTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.Actor.ActorProfileTable' uses 'CK.ActorProfileTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlPackage 'CK.DB.Auth.Package' uses its own full name as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.Auth.AuthProviderTable' uses 'CK.AuthProviderTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlPackage 'CK.DB.User.UserGitHub.Package' uses its own full name as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlPackage 'CK.DB.User.UserPassword.Package' uses its own full name as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.User.UserGitHub.UserGitHubTable' uses 'CK.UserGitHubTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'CK.DB.User.UserPassword.UserPasswordTable' uses 'CK.UserPasswordTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlPackage 'ITI.Human.Data.Package' uses its own full name as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ClassroomTable' uses 'ITIH.ClassroomTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProductTable' uses 'ITIH.ProductTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProjectRankTable' uses 'ITIH.ProjectRankTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProjectTypeTable' uses 'ITIH.ProjectTypeTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SchoolStatusTable' uses 'ITIH.SchoolStatusTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.UpdateTrackTable' uses 'ITIH.UpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.UserAvatarsTable' uses 'ITIH.UserAvatarsTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.UserDetailsTable' uses 'ITIH.UserDetailsTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SchoolMemberTable' uses 'ITIH.SchoolMemberTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SemesterTable' uses 'ITIH.SemesterTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProjectTable' uses 'ITIH.ProjectTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.StudentTable' uses 'ITIH.StudentTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProjectMemberTable' uses 'ITIH.ProjectMemberTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.ProjectVotesTable' uses 'ITIH.ProjectVotesTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.StorageTable' uses 'ITIH.StorageTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.UserBalanceTable' uses 'ITIH.UserBalanceTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderTable' uses 'ITIH.OrderTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.StorageLinkedProductTable' uses 'ITIH.StorageLinkedProductTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderedProductTable' uses 'ITIH.OrderedProductTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderFinalDueTable' uses 'ITIH.OrderFinalDueTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.StorageLinkedProductUpdateTrackTable' uses 'ITIH.StorageLinkedProductUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderCreditTable' uses 'ITIH.OrderCreditTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderedProductUpdateTrackTable' uses 'ITIH.OrderedProductUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OrderPaymentTable' uses 'ITIH.OrderPaymentTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SLPCreditStateUpdateTrackTable' uses 'ITIH.SLPCreditStateUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SLPStockUpdateTrackTable' uses 'ITIH.SLPStockUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.SLPUnitPriceUpdateTrackTable' uses 'ITIH.SLPUnitPriceUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OPCurrentStateUpdateTrackTable' uses 'ITIH.OPCurrentStateUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  |          SqlTable 'ITI.Human.Data.OPPaymentStateUpdateTrackTable' uses 'ITIH.OPPaymentStateUpdateTrackTable' as its SetupName.
|  |  |  |  |  |  |  |  |  |  > Info: Binding dependencies between Setupable items.
|  |  |  |  |  |  |  |  |  |  > Info: Dynamic initialization of Setup items.
|  |  |  |  |  |  |  |  |  |  |  > Info: Executing 81 deferred actions.
|  |  |  |  |  |  |  |  |  |  |  |  > Info: Starting intialization round n°0.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.sActorCreate' in SqlObjectItem attribute of '[]db^CK.ActorTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sActorCreate' of '[]db^CK.ActorTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sActorCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.vGroup' in SqlObjectItem attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.vGroup' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vGroup.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sGroupCreate' in 'CreateGroupAsync' SqlProcedure attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sGroupCreate' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sGroupCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sGroupDestroy' in 'DestroyGroupAsync' SqlProcedure attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sGroupDestroy' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sGroupDestroy.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sGroupUserAdd' in 'AddUserAsync' SqlProcedure attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sGroupUserAdd' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sGroupUserAdd.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sGroupUserRemove' in 'RemoveUserAsync' SqlProcedure attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sGroupUserRemove' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sGroupUserRemove.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sGroupRemoveAllUsers' in 'RemoveAllUsersAsync' SqlProcedure attribute of '[]db^CK.GroupTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sGroupRemoveAllUsers' of '[]db^CK.GroupTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sGroupRemoveAllUsers.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.vUser' in SqlObjectItem attribute of '[]db^CK.UserTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.vUser' of '[]db^CK.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vUser.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserCreate' in 'CreateUserAsync' SqlProcedure attribute of '[]db^CK.UserTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserCreate' of '[]db^CK.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserUserNameSet' in 'UserNameSetAsync' SqlProcedure attribute of '[]db^CK.UserTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserUserNameSet' of '[]db^CK.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserUserNameSet.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserDestroy' in 'DestroyUserAsync' SqlProcedure attribute of '[]db^CK.UserTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserDestroy' of '[]db^CK.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserDestroy.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserRemoveFromAllGroups' in 'RemoveFromAllGroupsAsync' SqlProcedure attribute of '[]db^CK.UserTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserRemoveFromAllGroups' of '[]db^CK.UserTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserRemoveFromAllGroups.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.vUserAuthProvider' in SqlObjectItem attribute of '[]db^CK.DB.Auth.Package'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.vUserAuthProvider' of '[]db^CK.DB.Auth.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vUserAuthProvider.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sAuthUserInfoRead' in 'CmdReadUserAuthInfo' SqlProcedureNoExecute attribute of '[]db^CK.DB.Auth.Package'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sAuthUserInfoRead' of '[]db^CK.DB.Auth.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sAuthUserInfoRead.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sAuthUserOnLogin' in 'OnUserLoginAsync' SqlProcedure attribute of '[]db^CK.DB.Auth.Package'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sAuthUserOnLogin' of '[]db^CK.DB.Auth.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sAuthUserOnLogin.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sAuthProviderRegister' in 'RegisterProviderAsync' SqlProcedure attribute of '[]db^CK.AuthProviderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sAuthProviderRegister' of '[]db^CK.AuthProviderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sAuthProviderRegister.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider)' in SqlObjectItem attribute of '[]db^CK.DB.User.UserGitHub.Package'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider)' of '[]db^CK.DB.User.UserGitHub.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Transformer from file 'vUserAuthProvider.tql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider)' in SqlObjectItem attribute of '[]db^CK.DB.User.UserPassword.Package'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider)' of '[]db^CK.DB.User.UserPassword.Package'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Transformer from file 'vUserAuthProvider.tql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.UserGitHubTable([]db^CK.sUserDestroy)' in SqlObjectItem attribute of '[]db^CK.UserGitHubTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.UserGitHubTable([]db^CK.sUserDestroy)' of '[]db^CK.UserGitHubTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Transformer from file 'sUserDestroy.tql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserGitHubDestroy' in 'DestroyGitHubUserAsync' SqlProcedure attribute of '[]db^CK.UserGitHubTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserGitHubDestroy' of '[]db^CK.UserGitHubTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserGitHubDestroy.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserGitHubUCL' in 'GitHubUserUCLAsync' SqlProcedure attribute of '[]db^CK.UserGitHubTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserGitHubUCL' of '[]db^CK.UserGitHubTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserGitHubUCL.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin)' in SqlObjectItem attribute of '[]db^CK.UserPasswordTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin)' of '[]db^CK.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Transformer from file 'sAuthUserOnLogin.tql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^CK.UserPasswordTable([]db^CK.sUserDestroy)' in SqlObjectItem attribute of '[]db^CK.UserPasswordTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.UserPasswordTable([]db^CK.sUserDestroy)' of '[]db^CK.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Transformer from file 'sUserDestroy.tql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserPasswordDestroy' in 'DestroyPasswordUserAsync' SqlProcedure attribute of '[]db^CK.UserPasswordTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserPasswordDestroy' of '[]db^CK.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserPasswordDestroy.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserPasswordUCL' in 'PasswordUserUCLAsync' SqlProcedure attribute of '[]db^CK.UserPasswordTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^CK.sUserPasswordUCL' of '[]db^CK.UserPasswordTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserPasswordUCL.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProductCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.ProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProductCreate' of '[]db^ITIH.ProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProductCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProductUpdate' in 'Update' SqlProcedure attribute of '[]db^ITIH.ProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProductUpdate' of '[]db^ITIH.ProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProductUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectTypeCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.ProjectTypeTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectTypeCreate' of '[]db^ITIH.ProjectTypeTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectTypeCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserAvatarCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.UserAvatarsTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sUserAvatarCreate' of '[]db^ITIH.UserAvatarsTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserAvatarCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vUserProfile' in SqlObjectItem attribute of '[]db^ITIH.UserDetailsTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vUserProfile' of '[]db^ITIH.UserDetailsTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vUserProfile.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserDetailsCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.UserDetailsTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sUserDetailsCreate' of '[]db^ITIH.UserDetailsTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserDetailsCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserDetailsUpdate' in 'Update' SqlProcedure attribute of '[]db^ITIH.UserDetailsTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sUserDetailsUpdate' of '[]db^ITIH.UserDetailsTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserDetailsUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vSchoolMembers' in SqlObjectItem attribute of '[]db^ITIH.SchoolMemberTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vSchoolMembers' of '[]db^ITIH.SchoolMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vSchoolMembers.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sSchoolMemberCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.SchoolMemberTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sSchoolMemberCreate' of '[]db^ITIH.SchoolMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sSchoolMemberCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sSemesterCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.SemesterTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sSemesterCreate' of '[]db^ITIH.SemesterTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sSemesterCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vProjects' in SqlObjectItem attribute of '[]db^ITIH.ProjectTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vProjects' of '[]db^ITIH.ProjectTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vProjects.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.ProjectTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectCreate' of '[]db^ITIH.ProjectTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectDelete' in 'Delete' SqlProcedure attribute of '[]db^ITIH.ProjectTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectDelete' of '[]db^ITIH.ProjectTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectDelete.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStudentCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.StudentTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStudentCreate' of '[]db^ITIH.StudentTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStudentCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vProjectMembers' in SqlObjectItem attribute of '[]db^ITIH.ProjectMemberTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vProjectMembers' of '[]db^ITIH.ProjectMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vProjectMembers.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectMemberCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.ProjectMemberTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectMemberCreate' of '[]db^ITIH.ProjectMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectMemberCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectMemberDelete' in 'Delete' SqlProcedure attribute of '[]db^ITIH.ProjectMemberTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectMemberDelete' of '[]db^ITIH.ProjectMemberTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectMemberDelete.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sProjectVoteCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.ProjectVotesTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sProjectVoteCreate' of '[]db^ITIH.ProjectVotesTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sProjectVoteCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStorageCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.StorageTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStorageCreate' of '[]db^ITIH.StorageTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStorageCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStallUpdate' in 'UpdateStall' SqlProcedure attribute of '[]db^ITIH.StorageTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStallUpdate' of '[]db^ITIH.StorageTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStallUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vUserBalance' in SqlObjectItem attribute of '[]db^ITIH.UserBalanceTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vUserBalance' of '[]db^ITIH.UserBalanceTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vUserBalance.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserBalanceCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.UserBalanceTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sUserBalanceCreate' of '[]db^ITIH.UserBalanceTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserBalanceCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sUserBalanceUpdate' in 'Update' SqlProcedure attribute of '[]db^ITIH.UserBalanceTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sUserBalanceUpdate' of '[]db^ITIH.UserBalanceTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sUserBalanceUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vOrderedProducts' in SqlObjectItem attribute of '[]db^ITIH.OrderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vOrderedProducts' of '[]db^ITIH.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vOrderedProducts.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vOrders' in SqlObjectItem attribute of '[]db^ITIH.OrderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vOrders' of '[]db^ITIH.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vOrders.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.OrderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderCreate' of '[]db^ITIH.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderUpdate' in 'Update' SqlProcedure attribute of '[]db^ITIH.OrderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderUpdate' of '[]db^ITIH.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderDelete' in 'Delete' SqlProcedure attribute of '[]db^ITIH.OrderTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderDelete' of '[]db^ITIH.OrderTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderDelete.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: '[]db^ITIH.vStorageLinkedProducts' in SqlObjectItem attribute of '[]db^ITIH.StorageLinkedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.vStorageLinkedProducts' of '[]db^ITIH.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  - Warn: Missing SetupConfig:{}. At least an empty one should appear in the header.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded View from file 'vStorageLinkedProducts.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStorageLinkedProductCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.StorageLinkedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStorageLinkedProductCreate' of '[]db^ITIH.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStorageLinkedProductCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStorageLinkedProductUnitPriceUpdate' in 'UpdateUnitPrice' SqlProcedure attribute of '[]db^ITIH.StorageLinkedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStorageLinkedProductUnitPriceUpdate' of '[]db^ITIH.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStorageLinkedProductUnitPriceUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStorageLinkedProductStockUpdate' in 'UpdateStock' SqlProcedure attribute of '[]db^ITIH.StorageLinkedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStorageLinkedProductStockUpdate' of '[]db^ITIH.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStorageLinkedProductStockUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sStorageLinkedProductCreditStateUpdate' in 'UpdateCreditState' SqlProcedure attribute of '[]db^ITIH.StorageLinkedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sStorageLinkedProductCreditStateUpdate' of '[]db^ITIH.StorageLinkedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sStorageLinkedProductCreditStateUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderedProductCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.OrderedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderedProductCreate' of '[]db^ITIH.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderedProductCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderedProductCurrentStateUpdate' in 'UpdateCurrentState' SqlProcedure attribute of '[]db^ITIH.OrderedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderedProductCurrentStateUpdate' of '[]db^ITIH.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderedProductCurrentStateUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderedProductPaymentStateUpdate' in 'UpdatePaymentState' SqlProcedure attribute of '[]db^ITIH.OrderedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderedProductPaymentStateUpdate' of '[]db^ITIH.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderedProductPaymentStateUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderedProductDelete' in 'Delete' SqlProcedure attribute of '[]db^ITIH.OrderedProductTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderedProductDelete' of '[]db^ITIH.OrderedProductTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderedProductDelete.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderFinalDueCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.OrderFinalDueTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderFinalDueCreate' of '[]db^ITIH.OrderFinalDueTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderFinalDueCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderFinalDueUpdate' in 'Update' SqlProcedure attribute of '[]db^ITIH.OrderFinalDueTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderFinalDueUpdate' of '[]db^ITIH.OrderFinalDueTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderFinalDueUpdate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderCreditCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.OrderCreditTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderCreditCreate' of '[]db^ITIH.OrderCreditTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderCreditCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderPaymentCreate' in 'Create' SqlProcedure attribute of '[]db^ITIH.OrderPaymentTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderPaymentCreate' of '[]db^ITIH.OrderPaymentTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderPaymentCreate.sql'.
|  |  |  |  |  |  |  |  |  |  |  |  |  > Info: Handling: 'sOrderPaymentDelete' in 'Delete' SqlProcedure attribute of '[]db^ITIH.OrderPaymentTable'
|  |  |  |  |  |  |  |  |  |  |  |  |  |  > Trace: Loading '[]db^ITIH.sOrderPaymentDelete' of '[]db^ITIH.OrderPaymentTable'.
|  |  |  |  |  |  |  |  |  |  |  |  |  |  < Loaded Procedure from file 'sOrderPaymentDelete.sql'.
|  |  |  |  |  |  |  |  |  > Trace: Installing CKCore kernel.
|  |  |  |  |  |  |  |  |  < Installed in version 15.
|  |  |  |  |  |  |  |  |  > Info: Reading original versions.
|  |  |  |  |  |  |  |  |  |  > Trace: Installing SqlVersionedItemRepository store.
|  |  |  |  |  |  |  |  |  |  < Installed first store version.
|  |  |  |  |  |  |  |  |  |  > Info: Upgrading to Version = 0.
|  |  |  |  |  |  |  |  |  < Got 0 versions.
|  |  |  |  |  |  |  |  |  > Info: Setupable Core Engine initialization.
|  |  |  |  |  |  |  |  |  |  - Info: Starting a new setup.
|  |  |  |  |  |  |  |  |  > Info: Register step.
|  |  |  |  |  |  |  |  |  |  > Info: Instanciating drivers for 240 items.
|  |  |  |  |  |  |  |  |  |  > Info: Calling PreInit on 240 drivers.
|  |  |  |  |  |  |  |  |  |  |  - Info: 0 sql scripts in resource found for 'CK.ActorTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.CK.ActorTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.GroupTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          2 sql scripts in resource found for 'Model.CK.GroupTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.UserTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          5 sql scripts in resource found for 'Model.CK.UserTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.ActorProfileTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.CK.ActorProfileTable' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.DB.Actor.Package' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'Model.CK.DB.Actor.Package' in 'CK.DB.Actor:CK.DB.Actor.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.AuthProviderTable' in 'CK.DB.Auth:CK.DB.Auth.Res.*.
|  |  |  |  |  |  |  |  |  |  |          3 sql scripts in resource found for 'Model.CK.AuthProviderTable' in 'CK.DB.Auth:CK.DB.Auth.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.DB.Auth.Package' in 'CK.DB.Auth:CK.DB.Auth.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'Model.CK.DB.Auth.Package' in 'CK.DB.Auth:CK.DB.Auth.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'CK.UserGitHubTable' in 'CK.DB.User.UserGitHub:CK.DB.User.UserGitHub.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.CK.UserGitHubTable' in 'CK.DB.User.UserGitHub:CK.DB.User.UserGitHub.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'CK.UserPasswordTable' in 'CK.DB.User.UserPassword:CK.DB.User.UserPassword.Res.*.
|  |  |  |  |  |  |  |  |  |  |          3 sql scripts in resource found for 'Model.CK.UserPasswordTable' in 'CK.DB.User.UserPassword:CK.DB.User.UserPassword.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'CK.DB.User.UserGitHub.Package' in 'CK.DB.User.UserGitHub:CK.DB.User.UserGitHub.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'Model.CK.DB.User.UserGitHub.Package' in 'CK.DB.User.UserGitHub:CK.DB.User.UserGitHub.Res.*.
|  |  |  |  |  |  |  |  |  |  |          2 sql scripts in resource found for 'CK.DB.User.UserPassword.Package' in 'CK.DB.User.UserPassword:CK.DB.User.UserPassword.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'Model.CK.DB.User.UserPassword.Package' in 'CK.DB.User.UserPassword:CK.DB.User.UserPassword.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ClassroomTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ClassroomTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProjectRankTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProjectRankTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SchoolStatusTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SchoolStatusTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.UpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.UpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProjectTypeTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProjectTypeTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.UserAvatarsTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.UserAvatarsTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.UserDetailsTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.UserDetailsTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SchoolMemberTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SchoolMemberTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SemesterTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SemesterTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProjectTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProjectTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.StudentTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.StudentTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProjectMemberTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProjectMemberTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.ProjectVotesTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.ProjectVotesTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.StorageTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.StorageTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.UserBalanceTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.UserBalanceTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.StorageLinkedProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.StorageLinkedProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.StorageLinkedProductUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.StorageLinkedProductUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderedProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderedProductTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderFinalDueTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderFinalDueTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SLPCreditStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SLPCreditStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SLPStockUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SLPStockUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.SLPUnitPriceUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.SLPUnitPriceUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderedProductUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderedProductUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderCreditTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderCreditTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OrderPaymentTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OrderPaymentTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OPCurrentStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OPCurrentStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITIH.OPPaymentStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          1 sql scripts in resource found for 'Model.ITIH.OPPaymentStateUpdateTrackTable' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'ITI.Human.Data.Package' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  |  |          0 sql scripts in resource found for 'Model.ITI.Human.Data.Package' in 'ITI.Human.Data:ITI.Human.Data.Res.*.
|  |  |  |  |  |  |  |  |  < 240 Setup items registered.
|  |  |  |  |  |  |  |  |  > Info: Init step.
|  |  |  |  |  |  |  |  |  |  > Trace: Raising Init setup event.
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []CK._g.poco.Factory
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^SqlDatabase.Connection
|  |  |  |  |  |  |  |  |  |  |  - Trace: if not exists(select 1 from sys.schemas where name = 'CK') begin exec( 'create schema [CK]' ); end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           if not exists(select 1 from sys.schemas where name = 'ITIH') begin exec( 'create schema [ITIH]' ); end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- Ensure that snapshot_isolation and read_committed_snapshot are on for this db.
|  |  |  |  |  |  |  |  |  |  |           declare @dbName sysname = DB_NAME();
|  |  |  |  |  |  |  |  |  |  |           declare @dbNameQ sysname = QUOTENAME(@dbName);
|  |  |  |  |  |  |  |  |  |  |           declare @isSingleUser bit = 0;
|  |  |  |  |  |  |  |  |  |  |           declare @isRCSEnabled int;
|  |  |  |  |  |  |  |  |  |  |           select @isRCSEnabled = is_read_committed_snapshot_on from sys.databases where name = @dbName;
|  |  |  |  |  |  |  |  |  |  |           if @isRCSEnabled = 0
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               exec( 'alter database '+@dbNameQ+' set single_user with rollback immediate;' );
|  |  |  |  |  |  |  |  |  |  |               set @isSingleUser = 1;
|  |  |  |  |  |  |  |  |  |  |               exec( 'alter database '+@dbNameQ+' set read_committed_snapshot on;' );
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |            
|  |  |  |  |  |  |  |  |  |  |           declare @isSIEnabled int;
|  |  |  |  |  |  |  |  |  |  |           select @isSIEnabled = snapshot_isolation_state from sys.databases where name = @dbName;
|  |  |  |  |  |  |  |  |  |  |           if @isSIEnabled = 0
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @isSingleUser = 0 exec ('alter database ' + @dbNameQ + ' set single_user with rollback immediate;');
|  |  |  |  |  |  |  |  |  |  |               exec( 'alter database '+@dbNameQ+' set allow_snapshot_isolation on;' );
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |            
|  |  |  |  |  |  |  |  |  |  |           if @isSingleUser = 1 exec( 'alter database '+@dbNameQ+' set multi_user;' );
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.SqlDatabase.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.Actor.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.ActorTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.ActorTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.GroupTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.GroupTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.ActorProfileTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.ActorProfileTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.Actor.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.Auth.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.AuthProviderTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.AuthProviderTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.Auth.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.User.UserGitHub.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.User.UserPassword.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserGitHubTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserPasswordTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserGitHubTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.UserPasswordTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.User.UserGitHub.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.CK.DB.User.UserPassword.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITI.Human.Data.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ClassroomTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectRankTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectTypeTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SchoolStatusTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserAvatarsTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserDetailsTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ClassroomTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectRankTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectTypeTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SchoolStatusTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserAvatarsTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserDetailsTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SchoolMemberTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SemesterTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SchoolMemberTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SemesterTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StudentTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StudentTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectMemberTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectVotesTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserBalanceTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectMemberTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.ProjectVotesTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.UserBalanceTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageLinkedProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageLinkedProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderedProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderFinalDueTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageLinkedProductUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderedProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderFinalDueTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.StorageLinkedProductUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderCreditTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderedProductUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderPaymentTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPCreditStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPStockUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPUnitPriceUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderCreditTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderedProductUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OrderPaymentTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPCreditStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPStockUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.SLPUnitPriceUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OPCurrentStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OPPaymentStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OPCurrentStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITIH.OPPaymentStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.ITI.Human.Data.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^Model.SqlDatabase
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^SqlDatabase.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.Actor.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.ActorTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sActorCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.ActorTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.GroupTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sGroupCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sGroupUserAdd
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sGroupUserRemove
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserUserNameSet
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.vGroup
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.vUser
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sGroupRemoveAllUsers
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserRemoveFromAllGroups
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sGroupDestroy
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserDestroy
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.GroupTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.ActorProfileTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.ActorProfileTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.Actor.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.Auth.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.AuthProviderTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sAuthUserOnLogin
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.vUserAuthProvider
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sAuthProviderRegister
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sAuthUserInfoRead
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.AuthProviderTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.Auth.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserGitHub.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserPassword.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider)
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider)
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserGitHubTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserPasswordTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserGitHubDestroy
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserGitHubUCL
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserPasswordDestroy
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserPasswordUCL
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserGitHubTable([]db^CK.sUserDestroy)
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin)
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserPasswordTable([]db^CK.sUserDestroy)
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.vUserAuthProvider#transform
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sAuthUserOnLogin#transform
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.sUserDestroy#transform
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserGitHubTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.UserPasswordTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserGitHub.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^CK.DB.User.UserPassword.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITI.Human.Data.Package.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ClassroomTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectRankTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectTypeTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SchoolStatusTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserAvatarsTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserDetailsTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ClassroomTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectRankTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SchoolStatusTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProductCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProductUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectTypeCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sUserAvatarCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sUserDetailsCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sUserDetailsUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vUserProfile
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectTypeTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SchoolMemberTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserAvatarsTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserDetailsTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SemesterTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sSchoolMemberCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vSchoolMembers
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SchoolMemberTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sSemesterCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SemesterTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StudentTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectDelete
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStudentCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vProjects
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StudentTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectMemberTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectVotesTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserBalanceTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectMemberCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectMemberDelete
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sProjectVoteCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStallUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStorageCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sUserBalanceCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sUserBalanceUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vProjectMembers
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vUserBalance
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectMemberTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.ProjectVotesTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.UserBalanceTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageLinkedProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderDelete
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStorageLinkedProductCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStorageLinkedProductCreditStateUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStorageLinkedProductStockUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sStorageLinkedProductUnitPriceUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vOrderedProducts
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vOrders
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.vStorageLinkedProducts
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageLinkedProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderedProductTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderFinalDueTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageLinkedProductUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderedProductCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderedProductCurrentStateUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderedProductDelete
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderedProductPaymentStateUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderFinalDueCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderFinalDueUpdate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.StorageLinkedProductUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderedProductTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderFinalDueTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPCreditStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPStockUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPUnitPriceUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderCreditTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderedProductUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderPaymentTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPCreditStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPStockUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.SLPUnitPriceUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderedProductUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderCreditCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderPaymentCreate
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.sOrderPaymentDelete
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OPCurrentStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OPPaymentStateUpdateTrackTable.Head
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderCreditTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OrderPaymentTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OPCurrentStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITIH.OPPaymentStateUpdateTrackTable
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^ITI.Human.Data.Package
|  |  |  |  |  |  |  |  |  |  > Info: Initializing []db^SqlDatabase
|  |  |  |  |  |  |  |  |  > Info: Install step.
|  |  |  |  |  |  |  |  |  |  > Trace: Raising Install setup event.
|  |  |  |  |  |  |  |  |  |  > Info: Installing []CK._g.poco.Factory (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^SqlDatabase.Connection (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.SqlDatabase.Head (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.Actor.Package.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.ActorTable.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.ActorTable|Install||5.0.0|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tActor
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	ActorId int not null identity (0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_tActor primary key clustered( ActorId )
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           -- Anonymous.
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tActor default values;
|  |  |  |  |  |  |  |  |  |  |  |           -- System.
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tActor default values;--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.ActorTable (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.GroupTable.Head (¤ => 5.0.1).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.GroupTable|Install||5.0.1|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table CK.tGroup
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |             GroupId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |             constraint PK_CK_tGroup primary key clustered( GroupId ),
|  |  |  |  |  |  |  |  |  |  |  |             constraint FK_CK_tGroup_ActorId foreign key ( GroupId ) references CK.tActor( ActorId ),
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tGroup( GroupId ) values( 0 );
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tGroup( GroupId ) values( 1 );
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserTable.Head (¤ => 5.0.3).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.UserTable|Install||5.0.3|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tUser 
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	-- Collation should be Case insensitive at least (this is the recommended practice for user names).
|  |  |  |  |  |  |  |  |  |  |  |           	-- 255 seems large but this is to support emails as user names: emails can be 254 unicode characters long.
|  |  |  |  |  |  |  |  |  |  |  |           	UserName nvarchar( 255 ) collate Latin1_General_100_CI_AS not null,
|  |  |  |  |  |  |  |  |  |  |  |           	-- Overall storage size for datetime2(0) is the same as for datetime2(2): 7 bytes.
|  |  |  |  |  |  |  |  |  |  |  |           	-- Let's keep the better precision for it.
|  |  |  |  |  |  |  |  |  |  |  |           	CreationDate datetime2(2) not null constraint DF_CK_tUser_CreationDate default( sysutcdatetime() ),
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_tUser primary key clustered( UserId ),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_CK_tUser_tActor foreign key ( UserId ) references CK.tActor( ActorId ),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint UK_CK_tUser_UserName unique ( UserName )
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tUser( UserId, UserName ) values( 0, '' );
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tUser( UserId, UserName ) values( 1, 'System' );--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.GroupTable (¤ => 5.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserTable (¤ => 5.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.ActorProfileTable.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.ActorProfileTable|Install||5.0.0|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tActorProfile
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	ActorId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	GroupId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_ActorProfile primary key clustered( ActorId, GroupId ),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_CK_ActorProfile_ActorId foreign key(ActorId) references CK.tActor( ActorId ),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_CK_ActorProfile_GroupId foreign key(GroupId) references CK.tActor( ActorId )
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           -- We do not index by GroupId by default. Usage of this kind of lookup (listing Actors of a Group) is 
|  |  |  |  |  |  |  |  |  |  |  |           -- mainly for administrative functionalities. This index may be created if actually needed.
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tActorProfile( ActorId, GroupId ) values( 0, 0 );
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tActorProfile( ActorId, GroupId ) values( 1, 1 );--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.ActorProfileTable (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.Actor.Package (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.Auth.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.AuthProviderTable.Head (¤ => 1.0.2).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.AuthProviderTable|Install||1.0.2|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |  |           -- This table is populated directly by the settle scripts of the packages that
|  |  |  |  |  |  |  |  |  |  |  |           -- implement providers by calling sAuthProviderRegister.
|  |  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tAuthProvider
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	AuthProviderId int not null identity(0,1),
|  |  |  |  |  |  |  |  |  |  |  |           	-- "Google" or "Basic" or "Oidc".
|  |  |  |  |  |  |  |  |  |  |  |               -- There must not be any dot '.' in the ProviderName.
|  |  |  |  |  |  |  |  |  |  |  |               -- When IsMultiScheme = 1 (this is the case for Oidc), this provider
|  |  |  |  |  |  |  |  |  |  |  |               -- can contain more than one actual Client Scheme per user.
|  |  |  |  |  |  |  |  |  |  |  |           	-- Using a CI collation here to avoid ambiguities.
|  |  |  |  |  |  |  |  |  |  |  |           	ProviderName varchar(64) collate Latin1_General_100_CI_AS not null,
|  |  |  |  |  |  |  |  |  |  |  |           	constraint CK_CK_AuthProvider_ProviderName check (CharIndex( '.', ProviderName ) = 0),
|  |  |  |  |  |  |  |  |  |  |  |           	-- Table name with its schema that holds at least UserId and LastLoginTime columns.
|  |  |  |  |  |  |  |  |  |  |  |           	UserProviderSchemaTableName nvarchar(128) not null,
|  |  |  |  |  |  |  |  |  |  |  |               -- This bit indicates that this provider can handle more than one client sheme.
|  |  |  |  |  |  |  |  |  |  |  |           	IsMultiScheme bit not null, 
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_AuthProvider primary key( AuthProviderId ),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint UK_CK_AuthProvider_ProviderName unique( ProviderName )
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tAuthProvider( ProviderName, UserProviderSchemaTableName, IsMultiScheme ) 
|  |  |  |  |  |  |  |  |  |  |  |               values( '', N'', 0 );--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.AuthProviderTable (¤ => 1.0.2).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.Auth.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.User.UserGitHub.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.User.UserPassword.Package.Head (¤ => 1.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserGitHubTable.Head (¤ => 2.0.1).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.UserGitHubTable|Install||2.0.1|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tUserGitHub
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	-- The GitHub account identifier is the key to identify a GitHub user.
|  |  |  |  |  |  |  |  |  |  |  |           	GitHubAccountId varchar(36) collate Latin1_General_100_BIN2 not null,
|  |  |  |  |  |  |  |  |  |  |  |           	LastLoginTime datetime2(2) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_UserGitHub primary key (UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_CK_UserGitHub_UserId foreign key (UserId) references CK.tUser(UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint UK_CK_UserGitHub_GitHubAccountId unique( GitHubAccountId )
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tUserGitHub( UserId, GitHubAccountId, LastLoginTime ) 
|  |  |  |  |  |  |  |  |  |  |  |           	values( 0, '', sysutcdatetime() );--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserPasswordTable.Head (¤ => 1.0.3).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.CK.UserPasswordTable|Install||1.0.3|AutoNum0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: --[=beginscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @CKScTC int = @@TRANCOUNT;
|  |  |  |  |  |  |  |  |  |  |  |           beginsp: if @CKScTC = 0 begin tran; else begin save transaction ckAutoNum0; end begin try
|  |  |  |  |  |  |  |  |  |  |  |           --[=/beginscript]
|  |  |  |  |  |  |  |  |  |  |  |           create table CK.tUserPassword
|  |  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PwdHash varbinary(64) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	LastWriteTime datetime2(2) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	LastLoginTime datetime2(2) not null,
|  |  |  |  |  |  |  |  |  |  |  |               FailedAttemptCount tinyint not null constraint DF_CK_UserPassword default(0),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_CK_UserPassword primary key (UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_CK_UserPassword_UserId foreign key (UserId) references CK.tUser(UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into CK.tUserPassword( UserId, PwdHash, LastWriteTime, LastLoginTime ) values(0, 0x, sysutcdatetime(), sysutcdatetime() );--[=endscript AutoNum0 ]
|  |  |  |  |  |  |  |  |  |  |  |           end try begin catch if @CKScTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction ckAutoNum0; exec CKCore.sErrorRethrow @@ProcId; set @CKScTC = 1; end catch;
|  |  |  |  |  |  |  |  |  |  |  |           endscript: if @CKScTC = 0 commit;
|  |  |  |  |  |  |  |  |  |  |  |           --[=/endscript]
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserGitHubTable (¤ => 2.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.UserPasswordTable (¤ => 1.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.User.UserGitHub.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.CK.DB.User.UserPassword.Package (¤ => 1.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITI.Human.Data.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ClassroomTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ClassroomTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tClassroom (
|  |  |  |  |  |  |  |  |  |  |  |           	ClassroomId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(126) not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_ITIH_tClassroom primary key (ClassroomId)
|  |  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values (N'');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E01');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E02');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E03');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E04');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E05');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E06');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E07');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E08');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E09');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E0S');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tClassroom ([Name]) values ('E0T');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProductTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProduct (
|  |  |  |  |  |  |  |  |  |  |  |           	ProductId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(256) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	[Desc] nvarchar(512) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	[Url] varchar(max) default 'https://image.noelshack.com/fichiers/2019/03/1/1547459850-barcode512.png'
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_ITIH_tProduct primary key (ProductId),
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProduct ([Name], [Desc], [Url])
|  |  |  |  |  |  |  |  |  |  |  |           	values (N'', N'', N'');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectRankTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProjectRankTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProjectRank (
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectRankId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(256) not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tProjectRank_ProjectRankId primary key (ProjectRankId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectRank ([Name]) values (N'');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectRank ([Name]) values ('Chef de projet');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectRank ([Name]) values ('Standard');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectTypeTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProjectTypeTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProjectType (
|  |  |  |  |  |  |  |  |  |  |  |           	TypeId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(256) not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tProjectType_TypeId primary key (TypeId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectType ([Name]) values (N'');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectType ([Name]) values ('PFH');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SchoolStatusTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SchoolStatusTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSchoolStatus (
|  |  |  |  |  |  |  |  |  |  |  |           	SchoolStatusId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	SchoolStatusName nvarchar(126) not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSchoolStatus_SchoolStatusId primary key (SchoolStatusId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolStatus (SchoolStatusName) values (N'');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolStatus (SchoolStatusName) values ('Professeur');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolStatus (SchoolStatusName) values ('Administrant');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolStatus (SchoolStatusName) values ('Étudiant');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolStatus (SchoolStatusName) values ('Tiers');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.UpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	UpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	ActorId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UpdateDate datetime2 not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tUpdateTrack_UpdateTrackId primary key (UpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tUpdateTrack_ActorId foreign key (ActorId) references CK.tActor (ActorId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tUpdateTrack (ActorId, UpdateDate)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, sysutcdatetime());
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserAvatarsTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.UserAvatarsTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tUserAvatars (
|  |  |  |  |  |  |  |  |  |  |  |           	UserAvatarId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	[Url] varchar(max) not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tUserAvatars_UserAvatarId primary key (UserAvatarId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tUserAvatars_UserId foreign key (UserId) references CK.tUser (UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tUserAvatars (UserId, [Url])
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 'https://image.noelshack.com/fichiers/2019/03/1/1547459724-unknown-user.png');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserDetailsTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.UserDetailsTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tUserDetails (
|  |  |  |  |  |  |  |  |  |  |  |           	UserDetailsId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	FirstName nvarchar(128) not null default N'',
|  |  |  |  |  |  |  |  |  |  |  |           	LastName nvarchar(128) not null default N'',
|  |  |  |  |  |  |  |  |  |  |  |           	BirthDate datetime2 not null default '00010101'
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tUserDetails_UserDetailsId primary key (UserDetailsId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tUserDetails_UserId foreign key (UserId) references CK.tUser (UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tUserDetails (UserId) values (0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ClassroomTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectRankTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectTypeTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SchoolStatusTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserAvatarsTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserDetailsTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SchoolMemberTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SchoolMemberTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSchoolMember (
|  |  |  |  |  |  |  |  |  |  |  |           	SchoolMemberId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	SchoolStatusId int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSchoolMember_SchoolMemberId primary key (SchoolMemberId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSchoolMember_UserId foreign key (UserId) references CK.tUser (UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSchoolMember_SchoolStatusId foreign key (SchoolStatusId) references ITIH.tSchoolStatus (SchoolStatusId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSchoolMember (UserId, SchoolStatusId) values (0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SemesterTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SemesterTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSemester (
|  |  |  |  |  |  |  |  |  |  |  |           	SemesterId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(256)
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSemester_SemesterId primary key (SemesterId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values (N'');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S1');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S2');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S3');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S4');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S5');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S6');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S7');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S8');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S9');
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSemester ([Name]) values ('S10');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SchoolMemberTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SemesterTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProjectTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProject (
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	TypeId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	SemesterId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	[Name] nvarchar(256) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Headline nvarchar(256) not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Pitch nvarchar(512) not null,
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tProject_ProjectId primary key (ProjectId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProject_TypeId foreign key (TypeId) references ITIH.tProjectType (TypeId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProject_SemesterId foreign key (SemesterId) references ITIH.tSemester (SemesterId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProject (TypeId, SemesterId, [Name], Headline, Pitch)
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 0, N'', N'', N'');
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StudentTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.StudentTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tStudent (
|  |  |  |  |  |  |  |  |  |  |  |           	StudentId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	SemesterId int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tStudent_StudentId primary key (StudentId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tStudent_UserId foreign key (UserId) references CK.tUser (UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tStudent_SemesterId foreign key (SemesterId) references ITIH.tSemester (SemesterId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tStudent (UserId, SemesterId) values (0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StudentTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectMemberTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProjectMemberTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProjectMember (
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectMemberId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectRankId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tProjectMember_ProjectMemberId primary key (ProjectMemberId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProjectMember_ProjectId foreign key (ProjectId) references ITIH.tProject (ProjectId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProjectMember_RankId foreign key (ProjectRankId) references ITIH.tProjectRank (ProjectRankId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProjectMember_UserId foreign key (UserId) references CK.tUser (UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectMember (ProjectId, ProjectRankId, UserId) values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectVotesTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.ProjectVotesTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tProjectVotes (
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectVoteId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Note int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tProjectVotes_ProjectVoteId primary key (ProjectVoteId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProjectVotes_ProjectId foreign key (ProjectId) references ITIH.tProject (ProjectId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tProjectVotes_UserId foreign key (UserId) references CK.tUser (UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tProjectVotes (ProjectId, UserId, Note) values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.StorageTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tStorage (
|  |  |  |  |  |  |  |  |  |  |  |           	StorageId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	OpenedStall bit not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tStorage_StorageId primary key (StorageId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tStorage_ProjectId foreign key (ProjectId) references ITIH.tProject (ProjectId)
|  |  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tStorage (ProjectId) values (0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserBalanceTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.UserBalanceTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tUserBalance (
|  |  |  |  |  |  |  |  |  |  |  |           	UserBalanceId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Balance int not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tUserBalance_UserBalanceId primary key (UserBalanceId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tUserBalance_UserId foreign key (UserId) references CK.tUser(UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tUserBalance_ProjectId foreign key (ProjectId) references ITIH.tProject(ProjectId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tUserBalance(UserId, ProjectId) values (0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectMemberTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.ProjectVotesTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.UserBalanceTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrder (
|  |  |  |  |  |  |  |  |  |  |  |           	OrderId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	StorageId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	ClassroomId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	CreationDate datetime2 not null,
|  |  |  |  |  |  |  |  |  |  |  |           	CurrentState int not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_ITIH_tOrder_OrderId primary key (OrderId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_tOrder_StorageId foreign key (StorageId) references ITIH.tStorage (StorageId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_tOrder_UserId foreign key (UserId) references CK.tUser (UserId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_Order_ClassroomId foreign key (ClassroomId) references ITIH.tClassroom (ClassroomId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrder (StorageId, UserId, ClassroomId, CreationDate)
|  |  |  |  |  |  |  |  |  |  |  |               values (0, 0, 0, sysutcdatetime());
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageLinkedProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.StorageLinkedProductTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tStorageLinkedProduct (
|  |  |  |  |  |  |  |  |  |  |  |           	StorageLinkedProductId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	StorageId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	ProductId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UnitPrice int not null default 0,
|  |  |  |  |  |  |  |  |  |  |  |           	Stock int not null default 0,
|  |  |  |  |  |  |  |  |  |  |  |           	CreditState bit not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tStorageLinkedProduct_StorageLinkedProductId primary key (StorageLinkedProductId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tStorageLinkedProduct_StorageId foreign key (StorageId) references ITIH.tStorage (StorageId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tStorageLinkedProduct_ProductId foreign key (ProductId) references ITIH.tProduct (ProductId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tStorageLinkedProduct (StorageId, ProductId)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageLinkedProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderedProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderedProductTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrderedProduct (
|  |  |  |  |  |  |  |  |  |  |  |           	OrderedProductId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	OrderId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	StorageLinkedProductId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Quantity int not null default 1,
|  |  |  |  |  |  |  |  |  |  |  |           	CurrentState int not null default 0,
|  |  |  |  |  |  |  |  |  |  |  |           	PaymentState int not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_ITIH_tOrderedProduct primary key (OrderedProductId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_tOrderedProduct_OrderId foreign key (OrderId) references ITIH.tOrder (OrderId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_tOrderedProduct_StorageLinkedProductId foreign key (StorageLinkedProductId) references ITIH.tStorageLinkedProduct (StorageLinkedProductId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrderedProduct (OrderId, StorageLinkedProductId, Quantity)
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderFinalDueTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderFinalDueTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrderFinalDue (
|  |  |  |  |  |  |  |  |  |  |  |           	OrderFinalDueId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	OrderId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Total int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Paid int not null default 0
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_ITIH_tOrderFinalDue_OrderFinalDueId primary key (OrderFinalDueId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_ITIH_tOrderFinalDue_OrderId foreign key (OrderId) references ITIH.tOrder (OrderId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrderFinalDue (OrderId, Total)
|  |  |  |  |  |  |  |  |  |  |  |               values (0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageLinkedProductUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.StorageLinkedProductUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tStorageLinkedProductUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	SLPUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	StorageLinkedProductId int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSLPUpdateTrack_SLPUpdateTrackId primary key (SLPUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSLPUpdateTrack_UpdateTrackId foreign key (UpdateTrackId) references ITIH.tUpdateTrack (UpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSLPUpdateTrack_StorageLinkedProductId foreign key (StorageLinkedProductId) references ITIH.tStorageLinkedProduct (StorageLinkedProductId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tStorageLinkedProductUpdateTrack (UpdateTrackId, StorageLinkedProductId)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderedProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderFinalDueTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.StorageLinkedProductUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderCreditTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderCreditTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrderCredit (
|  |  |  |  |  |  |  |  |  |  |  |           	OrderCreditId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	ProjectId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	UserId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Amount int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	CreditTime datetime2 default sysutcdatetime()
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tOrderCredit_OrderCreditId primary key (OrderCreditId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderCredit_ProjectId foreign key (ProjectId) references ITIH.tProject (ProjectId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderCredit_UserId foreign key (UserId) references CK.tUser (UserId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrderCredit (ProjectId, UserId, Amount)
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderedProductUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderedProductUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrderedProductUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	OPUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	UpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	OrderedProductId int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tOrderedProductUpdateTrack_OPUpdateTrackId primary key (OPUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderedProductUpdateTrack_UpdateTrackId foreign key (UpdateTrackId) references ITIH.tUpdateTrack (UpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderedProductUpdateTrack_OrderedProductId foreign key (OrderedProductId) references ITIH.tOrderedProduct (OrderedProductId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrderedProductUpdateTrack (UpdateTrackId, OrderedProductId)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderPaymentTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OrderPaymentTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOrderPayment (
|  |  |  |  |  |  |  |  |  |  |  |           	OrderPaymentId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	OrderFinalDueId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	OrderedProductId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	Amount int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PaymentTime datetime2 default sysutcdatetime()
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tOrderPaymentTable_OrderPaymentId primary key (OrderPaymentId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderPaymentTable_OrderedProductId foreign key (OrderedProductId) references ITIH.tOrderedProduct (OrderedProductId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOrderPaymentTable_OrderFinalDueId foreign key (OrderFinalDueId) references ITIH.tOrderFinalDue (OrderFinalDueId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOrderPayment (OrderedProductId, OrderFinalDueId, Amount)
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPCreditStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SLPCreditStateUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSLPCreditStateUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	SLPCreditStateUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	SLPUpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PreviousCreditState bit not null,
|  |  |  |  |  |  |  |  |  |  |  |           	NewCreditState bit not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSLPCreditStateUpdateTrack_SLPCreditStateUpdateTrackId primary key (SLPCreditStateUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSLPCreditStateUpdateTrack_SLPUpdateTrackId foreign key (SLPUpdateTrackId) references ITIH.tStorageLinkedProductUpdateTrack (SLPUpdateTrackId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSLPCreditStateUpdateTrack (SLPUpdateTrackId, PreviousCreditState, NewCreditState)
|  |  |  |  |  |  |  |  |  |  |  |           	values (0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPStockUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SLPStockUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSLPStockUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	SLPStockUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	SLPUpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PreviousStock int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	NewStock int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSLPStockUpdateTrack_SLPStockUpdateTrackId primary key (SLPStockUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSLPStockUpdateTrack_SLPUpdateTrackId foreign key (SLPUpdateTrackId) references ITIH.tStorageLinkedProductUpdateTrack (SLPUpdateTrackId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSLPStockUpdateTrack (SLPUpdateTrackId, PreviousStock, NewStock)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPUnitPriceUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.SLPUnitPriceUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tSLPUnitPriceUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	SLPUnitPriceUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	SLPUpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PreviousUnitPrice int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	NewUnitPrice int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tSLPUnitPriceUpdateTrack_SLPUnitPriceUpdateTrackId primary key (SLPUnitPriceUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tSLPUnitPriceUpdateTrack_SLPUpdateTrackId foreign key (SLPUpdateTrackId) references ITIH.tStorageLinkedProductUpdateTrack (SLPUpdateTrackId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tSLPUnitPriceUpdateTrack (SLPUpdateTrackId, PreviousUnitPrice, NewUnitPrice)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderCreditTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderedProductUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OrderPaymentTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPCreditStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPStockUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.SLPUnitPriceUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OPCurrentStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OPCurrentStateUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOPCurrentStateUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	OPCurrentStateUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	OPUpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PreviousState int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	NewState int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tOPCurrentStateUpdateTrack_OPCurrentStateUpdateTrackId primary key (OPCurrentStateUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOPCurrentStateUpdateTrack_OPUpdateTrackId foreign key (OPUpdateTrackId) references ITIH.tOrderedProductUpdateTrack (OPUpdateTrackId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOPCurrentStateUpdateTrack (OPUpdateTrackId, PreviousState, NewState)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OPPaymentStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^Model.ITIH.OPPaymentStateUpdateTrackTable|Install||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: create table ITIH.tOPPaymentStateUpdateTrack (
|  |  |  |  |  |  |  |  |  |  |  |           	OPPaymentStateUpdateTrackId int not null identity(0, 1),
|  |  |  |  |  |  |  |  |  |  |  |           	OPUpdateTrackId int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	PreviousState int not null,
|  |  |  |  |  |  |  |  |  |  |  |           	NewState int not null
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           	constraint PK_tOPPaymentStateUpdateTrack_OPPaymentStateUpdateTrackId primary key (OPPaymentStateUpdateTrackId),
|  |  |  |  |  |  |  |  |  |  |  |           	constraint FK_tOPPaymentStateUpdateTrack_OPUpdateTrackId foreign key (OPUpdateTrackId) references ITIH.tOrderedProductUpdateTrack (OPUpdateTrackId)
|  |  |  |  |  |  |  |  |  |  |  |           );
|  |  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |  |           insert into ITIH.tOPPaymentStateUpdateTrack (OPUpdateTrackId, PreviousState, NewState)
|  |  |  |  |  |  |  |  |  |  |  |           	values(0, 0, 0);
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OPCurrentStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITIH.OPPaymentStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.ITI.Human.Data.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^Model.SqlDatabase (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^SqlDatabase.Head (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.Actor.Package.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.ActorTable.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sActorCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sActorCreate') is not null drop Procedure CK.sActorCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sActorCreate 
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ActorIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into CK.tActor default values;
|  |  |  |  |  |  |  |  |  |  |           	set @ActorIdResult = SCOPE_IDENTITY();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	-- The actor is in its own group.
|  |  |  |  |  |  |  |  |  |  |           	insert into CK.tActorProfile( ActorId, GroupId ) values( @ActorIdResult, @ActorIdResult );
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.ActorTable (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.GroupTable.Head (¤ => 5.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserTable.Head (¤ => 5.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sGroupCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sGroupCreate') is not null drop Procedure CK.sGroupCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sActorCreate" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Creates a Group.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sGroupCreate 
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@GroupIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	exec CK.sActorCreate @ActorId, @GroupIdResult output;
|  |  |  |  |  |  |  |  |  |  |           	insert into CK.tGroup( GroupId ) values( @GroupIdResult );
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sGroupUserAdd (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sGroupUserAdd') is not null drop Procedure CK.sGroupUserAdd;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Add a User to a Group. Does nothing if the User is already in the Group.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sGroupUserAdd 
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@GroupId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @GroupId <= 0 throw 50000, 'Group.InvalidId', 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	-- System is, somehow, already in all groups.
|  |  |  |  |  |  |  |  |  |  |               if @UserId = 1 return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           if @GroupId <> @UserId and not exists (select * from CK.tActorProfile where GroupId = @GroupId and ActorId = @UserId)
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		-- If this is the System Group, only members of it can add new Users.
|  |  |  |  |  |  |  |  |  |  |           		if @GroupId = 1 
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |           			if not exists( select 1 from CK.tActorProfile p where p.GroupId = 1 and p.ActorId = @ActorId ) 
|  |  |  |  |  |  |  |  |  |  |           			begin
|  |  |  |  |  |  |  |  |  |  |           				;throw 50000, 'Security.ActorMustBeSytem', 1;
|  |  |  |  |  |  |  |  |  |  |           			end
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PreUserAdd revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		insert into CK.tActorProfile( ActorId, GroupId ) values( @UserId, @GroupId );
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostUserAdd />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sGroupUserRemove (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sGroupUserRemove') is not null drop Procedure CK.sGroupUserRemove;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Removes a User from a Group.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sGroupUserRemove
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@GroupId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @GroupId <= 0 throw 50000, 'Group.InvalidId', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           if @GroupId <> @UserId and exists (select * from CK.tActorProfile where GroupId = @GroupId and ActorId = @UserId)
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		-- If this is the System Group, only members of it can remove Users.
|  |  |  |  |  |  |  |  |  |  |           		if @GroupId = 1 
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |           			if not exists( select 1 from CK.tActorProfile p where p.GroupId = 1 and p.ActorId = @ActorId ) 
|  |  |  |  |  |  |  |  |  |  |           			begin
|  |  |  |  |  |  |  |  |  |  |           				;throw 50000, 'Security.ActorMustBeSytem', 1;
|  |  |  |  |  |  |  |  |  |  |           			end
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PreUserRemove revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActorProfile where GroupId = @GroupId and ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		
|  |  |  |  |  |  |  |  |  |  |           		--<PostUserRemove />
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserCreate') is not null drop Procedure CK.sUserCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sActorCreate" ] }
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserCreate 
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserName nvarchar( 255 ),
|  |  |  |  |  |  |  |  |  |  |           	@UserIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           set @UserIdResult = 0;
|  |  |  |  |  |  |  |  |  |  |           	if exists( select UserId from CK.tUser where UserName = @UserName )
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		set @UserIdResult = -1;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	if @UserIdResult = 0
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		--<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sActorCreate @ActorId, @UserIdResult output;
|  |  |  |  |  |  |  |  |  |  |           		insert into CK.tUser( UserId, UserName ) values ( @UserIdResult, @UserName );
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserUserNameSet (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserUserNameSet') is not null drop Procedure CK.sUserUserNameSet;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           -- Sets the user name. 
|  |  |  |  |  |  |  |  |  |  |           -- There is no guaranty that the actual value will be the same as the one requested (if auto numbering 
|  |  |  |  |  |  |  |  |  |  |           -- is injected for example). 
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserUserNameSet
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |               @ActorId int,
|  |  |  |  |  |  |  |  |  |  |               @UserId int,
|  |  |  |  |  |  |  |  |  |  |               @UserName nvarchar(127),
|  |  |  |  |  |  |  |  |  |  |           	@Done bit output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           set @Done = 1;
|  |  |  |  |  |  |  |  |  |  |           	if exists( select * from CK.tUser where UserName = @UserName and UserId <> @UserId )
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		set @Done = 0;
|  |  |  |  |  |  |  |  |  |  |           		--<UserNameSetClash />
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	if @Done = 1
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		--<PreUserNameSet revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		update u 
|  |  |  |  |  |  |  |  |  |  |           			set u.UserName = @UserName
|  |  |  |  |  |  |  |  |  |  |           			from CK.tUser u   
|  |  |  |  |  |  |  |  |  |  |           			where u.UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostUserNameSet />
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.vGroup (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.vGroup') is not null drop View CK.vGroup;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create view CK.vGroup
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           	select  g.GroupId,
|  |  |  |  |  |  |  |  |  |  |           			GroupName = N'#Group-' +  cast(g.GroupId as varchar) collate Latin1_General_100_CI_AI,
|  |  |  |  |  |  |  |  |  |  |           			UserCount = (select count(*) 
|  |  |  |  |  |  |  |  |  |  |           							from CK.tUser u with(nolock) 
|  |  |  |  |  |  |  |  |  |  |           							inner join CK.tActorProfile p with(nolock) on p.ActorId = u.UserId
|  |  |  |  |  |  |  |  |  |  |           							where p.GroupId = g.GroupId)
|  |  |  |  |  |  |  |  |  |  |           		from CK.tGroup g;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.vUser (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.vUser') is not null drop View CK.vUser;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create view CK.vUser
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           	select  u.UserId,
|  |  |  |  |  |  |  |  |  |  |           			u.CreationDate,
|  |  |  |  |  |  |  |  |  |  |           			u.UserName
|  |  |  |  |  |  |  |  |  |  |           		from CK.tUser u;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sGroupRemoveAllUsers (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sGroupRemoveAllUsers') is not null drop Procedure CK.sGroupRemoveAllUsers;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sGroupUserRemove" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Clears a Group.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sGroupRemoveAllUsers
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@GroupId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @GroupId <= 0 throw 50000, 'Group.InvalidGroup', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           declare @UserId int;
|  |  |  |  |  |  |  |  |  |  |           	declare @CUser cursor;
|  |  |  |  |  |  |  |  |  |  |           	set @CUser = cursor local fast_forward for 
|  |  |  |  |  |  |  |  |  |  |           		select ActorId from CK.tActorProfile p 
|  |  |  |  |  |  |  |  |  |  |           						inner join CK.tUser u on u.UserId = p.ActorId
|  |  |  |  |  |  |  |  |  |  |           						where p.GroupId = @GroupId and p.ActorId <> @GroupId;
|  |  |  |  |  |  |  |  |  |  |           	open @CUser;
|  |  |  |  |  |  |  |  |  |  |           	fetch from @CUser into @UserId;
|  |  |  |  |  |  |  |  |  |  |           	while @@FETCH_STATUS = 0
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sGroupUserRemove @ActorId, @GroupId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           		fetch next from @CUser into @UserId;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	deallocate @CUser;
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserRemoveFromAllGroups (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserRemoveFromAllGroups') is not null drop Procedure CK.sUserRemoveFromAllGroups;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sGroupUserRemove" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Removes a User from all the Groups it belongs to.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserRemoveFromAllGroups
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           declare @GroupId int;
|  |  |  |  |  |  |  |  |  |  |           	declare @CGroup cursor;
|  |  |  |  |  |  |  |  |  |  |           	set @CGroup = cursor local fast_forward for 
|  |  |  |  |  |  |  |  |  |  |           		select GroupId from CK.tActorProfile where ActorId = @UserId and GroupId <> @UserId;
|  |  |  |  |  |  |  |  |  |  |           	open @CGroup
|  |  |  |  |  |  |  |  |  |  |           	fetch from @CGroup into @GroupId
|  |  |  |  |  |  |  |  |  |  |           	while @@FETCH_STATUS = 0
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sGroupUserRemove @ActorId, @GroupId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           		fetch next from @CGroup into @GroupId;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	deallocate @CGroup;
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sGroupDestroy (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sGroupDestroy') is not null drop Procedure CK.sGroupDestroy;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sGroupRemoveAllUsers" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Destroys a Group: can work only if there is no Users inside the Group except if @ForceDestroy = 1.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sGroupDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@GroupId int,
|  |  |  |  |  |  |  |  |  |  |           	@ForceDestroy bit = 0
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @GroupId <= 1 throw 50000, 'Group.Undestroyable', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreDestroy revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if @ForceDestroy = 1
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sGroupRemoveAllUsers @ActorId, @GroupId;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	else
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		if exists( select * from CK.tActorProfile where GroupId = @GroupId and ActorId <> @GroupId ) throw 50000, 'Group.NotEmptyGroup', 1;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	delete from CK.tActorProfile where GroupId = @GroupId;
|  |  |  |  |  |  |  |  |  |  |           	delete from CK.tGroup where GroupId = @GroupId;
|  |  |  |  |  |  |  |  |  |  |           	delete from CK.tActor where ActorId = @GroupId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostDestroy />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserDestroy (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserDestroy') is not null drop Procedure CK.sUserDestroy;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- This will be transformed by []db^CK.UserGitHubTable([]db^CK.sUserDestroy), []db^CK.UserPasswordTable([]db^CK.sUserDestroy)
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": [ "CK.sUserRemoveFromAllGroups" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Destroys a User: automatically removes it from any Groups it may belong to.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId <= 1 throw 50000, 'User.Undestroyable', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           if exists( select * from CK.tUser where UserId = @UserId )
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		--<PreDestroy revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserRemoveFromAllGroups @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActorProfile where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tUser where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActor where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostDestroy />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.GroupTable (¤ => 5.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserTable (¤ => 5.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.ActorProfileTable.Head (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.ActorProfileTable (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.Actor.Package (¤ => 5.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.Auth.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.AuthProviderTable.Head (¤ => 1.0.2).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sAuthUserOnLogin (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sAuthUserOnLogin') is not null drop Procedure CK.sAuthUserOnLogin;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- This will be transformed by []db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin)
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Both @FailureCode and @FailureReason can be set.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @Scheme:         Provider name. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @LastLoginTime:  Last login time ('0001-01-01' for first login). Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @UserId:         User identifier. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @LoginTimeNow:   Current login time. This is the exact time that will become, on success, the LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           --                  in the provider table. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @ActualLogin:    True for an actual login. False otherwise: only checks must be done.
|  |  |  |  |  |  |  |  |  |  |           -- @FailureCode:    To reject login, set this to a non null value (should be greater to 0).
|  |  |  |  |  |  |  |  |  |  |           -- @FailureReason:  Optional (may be deduced from @FailureCode). If set to a non null string and @FailureCode
|  |  |  |  |  |  |  |  |  |  |           --                  is not set, @FailureCode is set to 1 (Unspecified).
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           --  On output these 2 variables are normalized to be both null if login succeeds or non null on failure.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sAuthUserOnLogin
|  |  |  |  |  |  |  |  |  |  |           ( 
|  |  |  |  |  |  |  |  |  |  |           	@Scheme varchar(64),
|  |  |  |  |  |  |  |  |  |  |           	@LastLoginTime datetime2(2),
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |               @ActualLogin bit,
|  |  |  |  |  |  |  |  |  |  |           	@LoginTimeNow datetime2(2),
|  |  |  |  |  |  |  |  |  |  |               @FailureCode int output,
|  |  |  |  |  |  |  |  |  |  |               @FailureReason nvarchar(255) output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @Scheme is null throw 50000, 'Argument.Scheme.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @LastLoginTime is null throw 50000, 'Argument.LastLoginTime.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId is null or @UserId <= 0 throw 50000, 'Argument.InvalidUserId', 1;
|  |  |  |  |  |  |  |  |  |  |               if @LoginTimeNow is null throw 50000, 'Argument.LoginTimeNow.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @ActualLogin is null throw 50000, 'Argument.ActualLogin.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCheckLoginFailure revert />
|  |  |  |  |  |  |  |  |  |  |               --<CheckLoginFailure />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               --<NormalizeLoginFailure />
|  |  |  |  |  |  |  |  |  |  |               if @FailureReason is not null or @FailureCode is not null
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   -- Normalize @FailureCode: always positive.
|  |  |  |  |  |  |  |  |  |  |                   if @FailureCode is null or @FailureCode = 0 set @FailureCode = 1; -- Unspecified
|  |  |  |  |  |  |  |  |  |  |                   else if @FailureCode < 0 set @FailureCode = -@FailureCode;
|  |  |  |  |  |  |  |  |  |  |                   -- Normalize @FailureReason (trim) and back to null if empty.
|  |  |  |  |  |  |  |  |  |  |                   set @FailureReason = rtrim(ltrim(@FailureReason));
|  |  |  |  |  |  |  |  |  |  |                   if len(@FailureReason) = 0 set @FailureReason = null;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               --<PostCheckLoginFailure />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               if @ActualLogin = 1
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   if @FailureCode is null
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |                       declare @unused1 int;
|  |  |  |  |  |  |  |  |  |  |                       --<LoginSucceed />
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |                   else
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |                       declare @unused2 int;
|  |  |  |  |  |  |  |  |  |  |                       --<LoginFailed />
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.vUserAuthProvider (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.vUserAuthProvider') is not null drop View CK.vUserAuthProvider;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- This will be transformed by []db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider), []db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider)
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { } 
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           -- This view is an union all of selects injected by the different providers.
|  |  |  |  |  |  |  |  |  |  |           -- The first record is a fake one (filtered with an always false clause) that eases
|  |  |  |  |  |  |  |  |  |  |           -- the injection and describes the expected data model.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- The LastUsed can be '0001-01-01 00:00:00' (that is equal to DateTime.MinValue or CK.Core.Util.DateTime.UtcMinValue) 
|  |  |  |  |  |  |  |  |  |  |           -- in this view if a user has been registered in the provider but has not actually logged in yet.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- An exemple of a transformer (the one from Google provider):
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           --		-- SetupConfig: { "AddRequires": "Model.CK.UserGoogleTable" } 
|  |  |  |  |  |  |  |  |  |  |           --		-- 
|  |  |  |  |  |  |  |  |  |  |           --		create transformer on CK.vUserAuthProvider
|  |  |  |  |  |  |  |  |  |  |           --		as
|  |  |  |  |  |  |  |  |  |  |           --		begin
|  |  |  |  |  |  |  |  |  |  |           --			inject "
|  |  |  |  |  |  |  |  |  |  |           --			union all
|  |  |  |  |  |  |  |  |  |  |           --			select UserId, 'Google', LastLoginTime from CK.tUserGoogle where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           --			" after first part {select};
|  |  |  |  |  |  |  |  |  |  |           --		end
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create view CK.vUserAuthProvider( UserId, Scheme, LastUsed )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           	select	UserId = 0, Scheme = 'Scheme (ProviderName when IsMultiScheme = 0)', LastUsed = 'non null datetime2(2)' -- (provider table).LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           		from CKCore.tSystem where 1 = 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sAuthProviderRegister (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sAuthProviderRegister') is not null drop Procedure CK.sAuthProviderRegister;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { } 
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sAuthProviderRegister
|  |  |  |  |  |  |  |  |  |  |           ( 
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int, 
|  |  |  |  |  |  |  |  |  |  |           	@ProviderName varchar(64),
|  |  |  |  |  |  |  |  |  |  |           	@UserProviderSchemaTableName nvarchar(128),
|  |  |  |  |  |  |  |  |  |  |           	@IsMultiScheme bit,
|  |  |  |  |  |  |  |  |  |  |           	@AuthProviderIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert CK.tAuthProvider( ProviderName, UserProviderSchemaTableName, IsMultiScheme ) 
|  |  |  |  |  |  |  |  |  |  |           		values( @ProviderName, @UserProviderSchemaTableName, @IsMultiScheme );
|  |  |  |  |  |  |  |  |  |  |           	set @AuthProviderIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sAuthUserInfoRead (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sAuthUserInfoRead') is not null drop Procedure CK.sAuthUserInfoRead;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: { "Requires": "CK.vUserAuthProvider" } 
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sAuthUserInfoRead
|  |  |  |  |  |  |  |  |  |  |           ( 
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           	select UserId, UserName from CK.tUser with(nolock) where UserId = @UserId and @UserId > 0;
|  |  |  |  |  |  |  |  |  |  |           	select Scheme, LastUsed 
|  |  |  |  |  |  |  |  |  |  |           		from CK.vUserAuthProvider with(nolock) 
|  |  |  |  |  |  |  |  |  |  |           		where UserId = @UserId and LastUsed > '0001-01-01'
|  |  |  |  |  |  |  |  |  |  |           		order by LastUsed desc;
|  |  |  |  |  |  |  |  |  |  |           	return 0;
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.AuthProviderTable (¤ => 1.0.2).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.Auth.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserGitHub.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserPassword.Package.Head (¤ => 1.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider) (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: Successfully applied 'inject "
|  |  |  |  |  |  |  |  |  |  |           	union all
|  |  |  |  |  |  |  |  |  |  |           	select UserId, 'GitHub', LastLoginTime from CK.tUserGitHub where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           	" after first part {select};'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Parsing transformation result.
|  |  |  |  |  |  |  |  |  |  |  - Trace: -- SetupConfig: { } 
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           -- This view is an union all of selects injected by the different providers.
|  |  |  |  |  |  |  |  |  |  |           -- The first record is a fake one (filtered with an always false clause) that eases
|  |  |  |  |  |  |  |  |  |  |           -- the injection and describes the expected data model.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- The LastUsed can be '0001-01-01 00:00:00' (that is equal to DateTime.MinValue or CK.Core.Util.DateTime.UtcMinValue) 
|  |  |  |  |  |  |  |  |  |  |           -- in this view if a user has been registered in the provider but has not actually logged in yet.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- An exemple of a transformer (the one from Google provider):
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           --		-- SetupConfig: { "AddRequires": "Model.CK.UserGoogleTable" } 
|  |  |  |  |  |  |  |  |  |  |           --		-- 
|  |  |  |  |  |  |  |  |  |  |           --		create transformer on CK.vUserAuthProvider
|  |  |  |  |  |  |  |  |  |  |           --		as
|  |  |  |  |  |  |  |  |  |  |           --		begin
|  |  |  |  |  |  |  |  |  |  |           --			inject "
|  |  |  |  |  |  |  |  |  |  |           --			union all
|  |  |  |  |  |  |  |  |  |  |           --			select UserId, 'Google', LastLoginTime from CK.tUserGoogle where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           --			" after first part {select};
|  |  |  |  |  |  |  |  |  |  |           --		end
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           alter view CK.vUserAuthProvider( UserId, Scheme, LastUsed )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           	select	UserId = 0, Scheme = 'Scheme (ProviderName when IsMultiScheme = 0)', LastUsed = 'non null datetime2(2)' -- (provider table).LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           		from CKCore.tSystem where 1 = 0
|  |  |  |  |  |  |  |  |  |  |           	union all
|  |  |  |  |  |  |  |  |  |  |           	select UserId, 'GitHub', LastLoginTime from CK.tUserGitHub where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           	;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider) (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: Successfully applied 'inject "
|  |  |  |  |  |  |  |  |  |  |           	union all
|  |  |  |  |  |  |  |  |  |  |             -- Ignores empty PwdHash since they are failed password migration.
|  |  |  |  |  |  |  |  |  |  |           	select UserId, 'Basic', case LastLoginTime when '0001-01-01' then null else LastLoginTime end from CK.tUserPassword where UserId > 0 and PwdHash != 0x
|  |  |  |  |  |  |  |  |  |  |           	" after first part {select};'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Parsing transformation result.
|  |  |  |  |  |  |  |  |  |  |  - Trace: -- SetupConfig: { } 
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           -- This view is an union all of selects injected by the different providers.
|  |  |  |  |  |  |  |  |  |  |           -- The first record is a fake one (filtered with an always false clause) that eases
|  |  |  |  |  |  |  |  |  |  |           -- the injection and describes the expected data model.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- The LastUsed can be '0001-01-01 00:00:00' (that is equal to DateTime.MinValue or CK.Core.Util.DateTime.UtcMinValue) 
|  |  |  |  |  |  |  |  |  |  |           -- in this view if a user has been registered in the provider but has not actually logged in yet.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- An exemple of a transformer (the one from Google provider):
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           --		-- SetupConfig: { "AddRequires": "Model.CK.UserGoogleTable" } 
|  |  |  |  |  |  |  |  |  |  |           --		-- 
|  |  |  |  |  |  |  |  |  |  |           --		create transformer on CK.vUserAuthProvider
|  |  |  |  |  |  |  |  |  |  |           --		as
|  |  |  |  |  |  |  |  |  |  |           --		begin
|  |  |  |  |  |  |  |  |  |  |           --			inject "
|  |  |  |  |  |  |  |  |  |  |           --			union all
|  |  |  |  |  |  |  |  |  |  |           --			select UserId, 'Google', LastLoginTime from CK.tUserGoogle where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           --			" after first part {select};
|  |  |  |  |  |  |  |  |  |  |           --		end
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           alter view CK.vUserAuthProvider( UserId, Scheme, LastUsed )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           	select	UserId = 0, Scheme = 'Scheme (ProviderName when IsMultiScheme = 0)', LastUsed = 'non null datetime2(2)' -- (provider table).LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           		from CKCore.tSystem where 1 = 0
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	union all
|  |  |  |  |  |  |  |  |  |  |             -- Ignores empty PwdHash since they are failed password migration.
|  |  |  |  |  |  |  |  |  |  |           	select UserId, 'Basic', case LastLoginTime when '0001-01-01' then null else LastLoginTime end from CK.tUserPassword where UserId > 0 and PwdHash != 0x
|  |  |  |  |  |  |  |  |  |  |           		union all
|  |  |  |  |  |  |  |  |  |  |           	select UserId, 'GitHub', LastLoginTime from CK.tUserGitHub where UserId > 0
|  |  |  |  |  |  |  |  |  |  |           	;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           -- This has been transformed by []db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider), []db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider)
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserGitHubTable.Head (¤ => 2.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserPasswordTable.Head (¤ => 1.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserGitHubDestroy (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserGitHubDestroy') is not null drop Procedure CK.sUserGitHubDestroy;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserGitHubDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId = 0 throw 50000, 'Argument.InvalidValue', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreDestroy revert /> 
|  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |           	delete CK.tUserGitHub where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostDestroy /> 
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserGitHubUCL (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserGitHubUCL') is not null drop Procedure CK.sUserGitHubUCL;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @GitHubAccountId can not be null. This is the key that identifies a GitHub user.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @Mode (flags): CreateOnly = 1, UpdateOnly = 2, CreateOrUpdate = 3, WithCheckLogin = 4, WithActualLogin = 8.
|  |  |  |  |  |  |  |  |  |  |           --                @Mode is normalized:
|  |  |  |  |  |  |  |  |  |  |           --                  - WithActualLogin implies WithCheckLogin.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @UCResult: None = 0, Created = 1, Updated = 2
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- When @UserId = 0 we are in "login mode": 
|  |  |  |  |  |  |  |  |  |  |           --  - @Mode must be UpdateOnly+WithCheckLogin (6) or UpdateOnly+WithActualLogin (10).
|  |  |  |  |  |  |  |  |  |  |           --    If the google id is found, we update what we have to and output the found @UserId.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- When @UserId is not 0, it must match with the one of the @GitHubAccountId otherwise it is an error
|  |  |  |  |  |  |  |  |  |  |           -- and an exception is thrown because:
|  |  |  |  |  |  |  |  |  |  |           --  - When updating it means that there is a mismatch of UserId/GitHub account in the calling code.
|  |  |  |  |  |  |  |  |  |  |           --  - When creating it means that another user with the same google account is already registered and
|  |  |  |  |  |  |  |  |  |  |           --    this should never happen.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- When extending this procedure, during update null parameters must be left unchanged.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserGitHubUCL
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int /*input*/output,
|  |  |  |  |  |  |  |  |  |  |           	@GitHubAccountId varchar(36), 
|  |  |  |  |  |  |  |  |  |  |           	@Mode int, -- not null enum { "CreateOnly" = 1, "UpdateOnly" = 2, "CreateOrUpdate" = 3, "WithCheckLogin" = 4, "WithActualLogin" = 8, "IgnoreOptimisticKey" = 16 }
|  |  |  |  |  |  |  |  |  |  |           	@UCResult int output, -- not null enum { None = 0, Created = 1, Updated = 2 }
|  |  |  |  |  |  |  |  |  |  |               @LoginFailureCode int output, -- Optional. Set by CK.sAuthUserOnLogin if login is rejected.
|  |  |  |  |  |  |  |  |  |  |               @LoginFailureReason nvarchar(255) output -- Optional.
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           	-- Clears IgnoreOptimisticKey since we do not use it here.
|  |  |  |  |  |  |  |  |  |  |           	set @Mode = (@Mode&~16);
|  |  |  |  |  |  |  |  |  |  |               if @Mode is null or @Mode < 1 or @Mode > 15 throw 50000, 'Argument.InvalidMode', 1;
|  |  |  |  |  |  |  |  |  |  |           	-- Handles @Mode: extracts @CheckLogin & @ActualLogin bit for readability.
|  |  |  |  |  |  |  |  |  |  |           	declare @CheckLogin bit = 0;
|  |  |  |  |  |  |  |  |  |  |           	declare @ActualLogin bit = 0;
|  |  |  |  |  |  |  |  |  |  |           	if (@Mode&8) <> 0 
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		set @ActualLogin = 1;
|  |  |  |  |  |  |  |  |  |  |                   set @CheckLogin = 1;
|  |  |  |  |  |  |  |  |  |  |           		set @Mode = @Mode&~(4+8);
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |               else if (@Mode&4) <> 0
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   set @CheckLogin = 1;
|  |  |  |  |  |  |  |  |  |  |           		set @Mode = @Mode&~4;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               if @ActorId is null or @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId is null or @UserId < 0 throw 50000, 'Argument.InvalidUserId', 1;
|  |  |  |  |  |  |  |  |  |  |           	if @GitHubAccountId is null throw 50000, 'Argument.NullGitHubAccountId', 1;
|  |  |  |  |  |  |  |  |  |  |           	if @UserId = 0 and (@Mode <> 2 or @CheckLogin = 0) throw 50000, 'Argument.ForUserIdZeroModeMustBeUpdateOnlyWithLogin', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           declare @ActualUserId int;
|  |  |  |  |  |  |  |  |  |  |           	declare @LastLoginTime datetime2(2);
|  |  |  |  |  |  |  |  |  |  |           	declare @Now datetime2(2) = sysutcdatetime();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	select	@ActualUserId = UserId,
|  |  |  |  |  |  |  |  |  |  |                       @LastLoginTime = LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           		from CK.tUserGitHub 
|  |  |  |  |  |  |  |  |  |  |           		where GitHubAccountId = @GitHubAccountId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PreCreateOrUpdate revert /> 
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if @ActualUserId is null
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		if (@Mode&1) <> 0 -- CreateOnly or CreateOrUpdate
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |                       set @LastLoginTime = '0001-01-01';
|  |  |  |  |  |  |  |  |  |  |           			--<PreCreate revert /> 
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			-- Unique constraint on GitHubAccountId will detect any existing UserId/GitHubAccountId clashes.
|  |  |  |  |  |  |  |  |  |  |           			insert into CK.tUserGitHub( UserId, GitHubAccountId, LastLoginTime ) 
|  |  |  |  |  |  |  |  |  |  |           				select	@UserId, 
|  |  |  |  |  |  |  |  |  |  |           						@GitHubAccountId, 
|  |  |  |  |  |  |  |  |  |  |           						@LastLoginTime;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @UCResult = 1; -- Created
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           		else set @UCResult = 0; -- None
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	else
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		-- Updating an existing registration.
|  |  |  |  |  |  |  |  |  |  |           		if (@Mode&2) <> 0 -- UpdateOnly or CreateOrUpdate
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |           			-- When updating, we may be in "login mode" if @UserId is 0.
|  |  |  |  |  |  |  |  |  |  |           			-- But if we are not, the provided @UserId must match the actual one.
|  |  |  |  |  |  |  |  |  |  |           			if @UserId = 0 set @UserId = @ActualUserId;
|  |  |  |  |  |  |  |  |  |  |           			else if @UserId <> @ActualUserId throw 50000, 'Argument.UserIdAndGitHubIdMismatch', 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |                       -- We have nothing to update since in case of login, LastLoginTime must be set
|  |  |  |  |  |  |  |  |  |  |                       -- after having called CK.sAuthUserOnLogin.
|  |  |  |  |  |  |  |  |  |  |                       -- This fake update is used as a placeholder for any actual updates that may be
|  |  |  |  |  |  |  |  |  |  |                       -- injected by other packages.
|  |  |  |  |  |  |  |  |  |  |           			update CK.tUserGitHub set 
|  |  |  |  |  |  |  |  |  |  |           					LastLoginTime = LastLoginTime 
|  |  |  |  |  |  |  |  |  |  |           				where UserId = @ActualUserId and GitHubAccountId = @GitHubAccountId;
|  |  |  |  |  |  |  |  |  |  |           			set @UCResult = 2; -- Updated
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           		else set @UCResult = 0; -- None 
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               --<PostCreateOrUpdate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if @CheckLogin = 1
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |                   -- If the user is not registered and we did not create it @LastLoginTime is null.
|  |  |  |  |  |  |  |  |  |  |                   if @LastLoginTime is null set @LoginFailureCode = 2; -- UnregisteredUser
|  |  |  |  |  |  |  |  |  |  |                   else
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |           		    exec CK.sAuthUserOnLogin 'GitHub', @LastLoginTime, @UserId, @ActualLogin, @Now, @LoginFailureCode output, @LoginFailureReason output;  
|  |  |  |  |  |  |  |  |  |  |                       if @ActualLogin = 1 and @LoginFailureCode is null
|  |  |  |  |  |  |  |  |  |  |                       begin
|  |  |  |  |  |  |  |  |  |  |           			    update CK.tUserGitHub set LastLoginTime = @Now
|  |  |  |  |  |  |  |  |  |  |                               where UserId = @UserId and GitHubAccountId = @GitHubAccountId;
|  |  |  |  |  |  |  |  |  |  |                       end
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |               else set @LoginFailureCode = 0; -- None
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserPasswordDestroy (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserPasswordDestroy') is not null drop Procedure CK.sUserPasswordDestroy;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserPasswordDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId = 0 throw 50000, 'Argument.InvalidValue', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreDestroy revert /> 
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete CK.tUserPassword where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostDestroy /> 
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserPasswordUCL (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('CK.sUserPasswordUCL') is not null drop Procedure CK.sUserPasswordUCL;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @Mode: CreateOnly = 1, UpdateOnly = 2, CreateOrUpdate = 3, WithCheckLogin = 4, WithActualLogin = 8
|  |  |  |  |  |  |  |  |  |  |           -- @UCResult: None = 0, Created = 1, Updated = 2
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @LoginFailureCode can be 4 in input (KnownLoginFailureCode.InvalidCredentials) if the password check has failed
|  |  |  |  |  |  |  |  |  |  |           -- (@LoginFailureCode value is handled only when @Mode&4 - WithCheckLogin or @Mode&8 - WithActualLogin).
|  |  |  |  |  |  |  |  |  |  |           -- This @LoginFailureCode is transmitted as-is to CK.sAuthUserOnLogin 'Basic', ...
|  |  |  |  |  |  |  |  |  |  |           -- Lockout and/or brute force/dictionary attacks, if handled at the database level, should be injected in CK.sAuthUserOnLogin.
|  |  |  |  |  |  |  |  |  |  |           -- 
|  |  |  |  |  |  |  |  |  |  |           create procedure CK.sUserPasswordUCL
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int /*input*/output, 
|  |  |  |  |  |  |  |  |  |  |           	@PwdHash varbinary(64),
|  |  |  |  |  |  |  |  |  |  |           	@Mode int, -- not null enum { "CreateOnly" = 1, "UpdateOnly" = 2, "CreateOrUpdate" = 3, "WithCheckLogin" = 4, "WithActualLogin" = 8, "IgnoreOptimisticKey" = 16 }
|  |  |  |  |  |  |  |  |  |  |           	@UCResult int output, -- not null enum { None = 0, Created = 1, Updated = 2 }
|  |  |  |  |  |  |  |  |  |  |               @LoginFailureCode int /*input*/output,
|  |  |  |  |  |  |  |  |  |  |               @LoginFailureReason nvarchar(255) output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           	-- Clears IgnoreOptimisticKey since we do not use it here.
|  |  |  |  |  |  |  |  |  |  |           	set @Mode = (@Mode&~16);
|  |  |  |  |  |  |  |  |  |  |               if @Mode is null or @Mode < 1 or @Mode > 15 throw 50000, 'Argument.InvalidMode', 1;
|  |  |  |  |  |  |  |  |  |  |           	-- Handles @Mode: extracts @CheckLogin & @ActualLogin bit for readability.
|  |  |  |  |  |  |  |  |  |  |           	declare @CheckLogin bit = 0;
|  |  |  |  |  |  |  |  |  |  |           	declare @ActualLogin bit = 0;
|  |  |  |  |  |  |  |  |  |  |           	if (@Mode&8) <> 0 
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		set @ActualLogin = 1;
|  |  |  |  |  |  |  |  |  |  |                   set @CheckLogin = 1;
|  |  |  |  |  |  |  |  |  |  |           		set @Mode = @Mode&~(4+8);
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |               else if (@Mode&4) <> 0
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   set @CheckLogin = 1;
|  |  |  |  |  |  |  |  |  |  |           		set @Mode = @Mode&~4;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           	if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId <= 0 throw 50000, 'Argument.InvalidUserId', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           declare @LastLoginTime datetime2(2);
|  |  |  |  |  |  |  |  |  |  |           	declare @Now datetime2(2) = sysutcdatetime();
|  |  |  |  |  |  |  |  |  |  |           	select @LastLoginTime = LastLoginTime from CK.tUserPassword where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if @LastLoginTime is null
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		if (@Mode&1) <> 0
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |                       -- @PwdHash can not be null here but can be empty: this is to
|  |  |  |  |  |  |  |  |  |  |                       -- handle password migration AND be able to manage FailedAttemptCount.
|  |  |  |  |  |  |  |  |  |  |           	        if @PwdHash is null throw 50000, 'Argument.InvalidUserPwdHash', 1;
|  |  |  |  |  |  |  |  |  |  |           			set @LastLoginTime = '0001-01-01';
|  |  |  |  |  |  |  |  |  |  |           			--<PreCreate revert /> 
|  |  |  |  |  |  |  |  |  |  |           			insert into CK.tUserPassword( UserId, PwdHash, LastWriteTime, LastLoginTime )
|  |  |  |  |  |  |  |  |  |  |                           values( @UserId, @PwdHash, @Now, @LastLoginTime);
|  |  |  |  |  |  |  |  |  |  |           			set @UCResult = 1;
|  |  |  |  |  |  |  |  |  |  |           			--<PostCreate /> 
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           		else set @UCResult = 0;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           	else
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		if (@Mode&2) <> 0
|  |  |  |  |  |  |  |  |  |  |           		begin
|  |  |  |  |  |  |  |  |  |  |                       -- @PwdHash can be null here, but if it is not null, it can not be empty.
|  |  |  |  |  |  |  |  |  |  |           	        if @PwdHash is not null and DataLength(@PwdHash) = 0 throw 50000, 'Argument.InvalidUserPwdHash', 1;
|  |  |  |  |  |  |  |  |  |  |           			--<PreUpdate revert /> 
|  |  |  |  |  |  |  |  |  |  |           			update CK.tUserPassword set
|  |  |  |  |  |  |  |  |  |  |                           PwdHash = case when @PwdHash is null then PwdHash else @PwdHash end,
|  |  |  |  |  |  |  |  |  |  |                           LastWriteTime = case when @PwdHash is null then @Now else LastWriteTime end
|  |  |  |  |  |  |  |  |  |  |                         where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           			set @UCResult = 2;
|  |  |  |  |  |  |  |  |  |  |           			--<PostUpdate />
|  |  |  |  |  |  |  |  |  |  |           		end
|  |  |  |  |  |  |  |  |  |  |           		else set @UCResult = 0;
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               if @CheckLogin = 1
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |                   if @LastLoginTime is null set @LoginFailureCode = 2; -- UnregisteredUser
|  |  |  |  |  |  |  |  |  |  |                   else
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |           		    exec CK.sAuthUserOnLogin 'Basic', @LastLoginTime, @UserId, @ActualLogin, @Now, @LoginFailureCode output, @LoginFailureReason output;
|  |  |  |  |  |  |  |  |  |  |                       if @ActualLogin = 1 and @LoginFailureCode is null
|  |  |  |  |  |  |  |  |  |  |                       begin
|  |  |  |  |  |  |  |  |  |  |           			    update CK.tUserPassword set
|  |  |  |  |  |  |  |  |  |  |                                   LastLoginTime = @Now,
|  |  |  |  |  |  |  |  |  |  |                                   FailedAttemptCount = 0
|  |  |  |  |  |  |  |  |  |  |                               where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |                       end
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |               else set @LoginFailureCode = 0; -- None
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserGitHubTable([]db^CK.sUserDestroy) (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: Successfully applied 'inject "
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserGitHubDestroy @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           	" into "PreDestroy";'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Parsing transformation result.
|  |  |  |  |  |  |  |  |  |  |  - Trace: -- SetupConfig: { "Requires": [ "CK.sUserRemoveFromAllGroups" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Destroys a User: automatically removes it from any Groups it may belong to.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           alter procedure CK.sUserDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId <= 1 throw 50000, 'User.Undestroyable', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           if exists( select * from CK.tUser where UserId = @UserId )
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		--<PreDestroy revert >
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserGitHubDestroy @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           --</PreDestroy>
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserRemoveFromAllGroups @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActorProfile where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tUser where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActor where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostDestroy />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin) (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: Successfully applied 'inject "
|  |  |  |  |  |  |  |  |  |  |               -- FailedAttemptCount increment is hendled here to centralize 
|  |  |  |  |  |  |  |  |  |  |               -- code in CK.sAuthUserOnLogin as much as possible.
|  |  |  |  |  |  |  |  |  |  |           		if @Scheme = 'Basic'
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                 -- By default, any login failure triggers a FailedAttemptCount increment.
|  |  |  |  |  |  |  |  |  |  |                 update CK.tUserPassword set FailedAttemptCount = FailedAttemptCount+1
|  |  |  |  |  |  |  |  |  |  |                   where UserId = @UserId and FailedAttemptCount < 255;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           	" into "LoginFailed";'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Parsing transformation result.
|  |  |  |  |  |  |  |  |  |  |  - Trace: -- SetupConfig: { }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Both @FailureCode and @FailureReason can be set.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- @Scheme:         Provider name. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @LastLoginTime:  Last login time ('0001-01-01' for first login). Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @UserId:         User identifier. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @LoginTimeNow:   Current login time. This is the exact time that will become, on success, the LastLoginTime
|  |  |  |  |  |  |  |  |  |  |           --                  in the provider table. Can not be null.
|  |  |  |  |  |  |  |  |  |  |           -- @ActualLogin:    True for an actual login. False otherwise: only checks must be done.
|  |  |  |  |  |  |  |  |  |  |           -- @FailureCode:    To reject login, set this to a non null value (should be greater to 0).
|  |  |  |  |  |  |  |  |  |  |           -- @FailureReason:  Optional (may be deduced from @FailureCode). If set to a non null string and @FailureCode
|  |  |  |  |  |  |  |  |  |  |           --                  is not set, @FailureCode is set to 1 (Unspecified).
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           --  On output these 2 variables are normalized to be both null if login succeeds or non null on failure.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           alter procedure CK.sAuthUserOnLogin
|  |  |  |  |  |  |  |  |  |  |           ( 
|  |  |  |  |  |  |  |  |  |  |           	@Scheme varchar(64),
|  |  |  |  |  |  |  |  |  |  |           	@LastLoginTime datetime2(2),
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |               @ActualLogin bit,
|  |  |  |  |  |  |  |  |  |  |           	@LoginTimeNow datetime2(2),
|  |  |  |  |  |  |  |  |  |  |               @FailureCode int output,
|  |  |  |  |  |  |  |  |  |  |               @FailureReason nvarchar(255) output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as 
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |               if @Scheme is null throw 50000, 'Argument.Scheme.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @LastLoginTime is null throw 50000, 'Argument.LastLoginTime.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId is null or @UserId <= 0 throw 50000, 'Argument.InvalidUserId', 1;
|  |  |  |  |  |  |  |  |  |  |               if @LoginTimeNow is null throw 50000, 'Argument.LoginTimeNow.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |               if @ActualLogin is null throw 50000, 'Argument.ActualLogin.MustNotBeNull', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCheckLoginFailure revert />
|  |  |  |  |  |  |  |  |  |  |               --<CheckLoginFailure />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               --<NormalizeLoginFailure />
|  |  |  |  |  |  |  |  |  |  |               if @FailureReason is not null or @FailureCode is not null
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   -- Normalize @FailureCode: always positive.
|  |  |  |  |  |  |  |  |  |  |                   if @FailureCode is null or @FailureCode = 0 set @FailureCode = 1; -- Unspecified
|  |  |  |  |  |  |  |  |  |  |                   else if @FailureCode < 0 set @FailureCode = -@FailureCode;
|  |  |  |  |  |  |  |  |  |  |                   -- Normalize @FailureReason (trim) and back to null if empty.
|  |  |  |  |  |  |  |  |  |  |                   set @FailureReason = rtrim(ltrim(@FailureReason));
|  |  |  |  |  |  |  |  |  |  |                   if len(@FailureReason) = 0 set @FailureReason = null;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               --<PostCheckLoginFailure />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               if @ActualLogin = 1
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                   if @FailureCode is null
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |                       declare @unused1 int;
|  |  |  |  |  |  |  |  |  |  |                       --<LoginSucceed />
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |                   else
|  |  |  |  |  |  |  |  |  |  |                   begin
|  |  |  |  |  |  |  |  |  |  |                       declare @unused2 int;
|  |  |  |  |  |  |  |  |  |  |                       --<LoginFailed >
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |               -- FailedAttemptCount increment is hendled here to centralize 
|  |  |  |  |  |  |  |  |  |  |               -- code in CK.sAuthUserOnLogin as much as possible.
|  |  |  |  |  |  |  |  |  |  |           		if @Scheme = 'Basic'
|  |  |  |  |  |  |  |  |  |  |               begin
|  |  |  |  |  |  |  |  |  |  |                 -- By default, any login failure triggers a FailedAttemptCount increment.
|  |  |  |  |  |  |  |  |  |  |                 update CK.tUserPassword set FailedAttemptCount = FailedAttemptCount+1
|  |  |  |  |  |  |  |  |  |  |                   where UserId = @UserId and FailedAttemptCount < 255;
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           --</LoginFailed>
|  |  |  |  |  |  |  |  |  |  |                   end
|  |  |  |  |  |  |  |  |  |  |               end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           -- This has been transformed by []db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin)
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserPasswordTable([]db^CK.sUserDestroy) (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: Successfully applied 'inject "
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserPasswordDestroy @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           	" into "PreDestroy";'.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Parsing transformation result.
|  |  |  |  |  |  |  |  |  |  |  - Trace: -- SetupConfig: { "Requires": [ "CK.sUserRemoveFromAllGroups" ] }
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           -- Destroys a User: automatically removes it from any Groups it may belong to.
|  |  |  |  |  |  |  |  |  |  |           --
|  |  |  |  |  |  |  |  |  |  |           alter procedure CK.sUserDestroy
|  |  |  |  |  |  |  |  |  |  |           (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as begin
|  |  |  |  |  |  |  |  |  |  |               if @ActorId <= 0 throw 50000, 'Security.AnonymousNotAllowed', 1;
|  |  |  |  |  |  |  |  |  |  |               if @UserId <= 1 throw 50000, 'User.Undestroyable', 1;
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           if exists( select * from CK.tUser where UserId = @UserId )
|  |  |  |  |  |  |  |  |  |  |           	begin
|  |  |  |  |  |  |  |  |  |  |           		--<PreDestroy revert >
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserPasswordDestroy @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserGitHubDestroy @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           --</PreDestroy>
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		exec CK.sUserRemoveFromAllGroups @ActorId, @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActorProfile where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tUser where UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           		delete from CK.tActor where ActorId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           		--<PostDestroy />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	end
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end
|  |  |  |  |  |  |  |  |  |  |           -- This has been transformed by []db^CK.UserGitHubTable([]db^CK.sUserDestroy), []db^CK.UserPasswordTable([]db^CK.sUserDestroy)
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.vUserAuthProvider#transform (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sAuthUserOnLogin#transform (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.sUserDestroy#transform (unversioned).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserGitHubTable (¤ => 2.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.UserPasswordTable (¤ => 1.0.3).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserGitHub.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^CK.DB.User.UserPassword.Package (¤ => 1.0.1).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITI.Human.Data.Package.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ClassroomTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectRankTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectTypeTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SchoolStatusTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserAvatarsTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserDetailsTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ClassroomTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectRankTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SchoolStatusTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProductCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProductCreate') is not null drop Procedure ITIH.sProductCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProductCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@Name nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@Desc nvarchar(512),
|  |  |  |  |  |  |  |  |  |  |           	@Url nvarchar(max),
|  |  |  |  |  |  |  |  |  |  |           	@ProductIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tProduct ([Name], [Desc], [Url])
|  |  |  |  |  |  |  |  |  |  |           		values (@Name, @Desc, @Url);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @ProductIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProductUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProductUpdate') is not null drop Procedure ITIH.sProductUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProductUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Name nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@Desc nvarchar(512),
|  |  |  |  |  |  |  |  |  |  |           	@Url nvarchar(max),
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousName nvarchar(256);
|  |  |  |  |  |  |  |  |  |  |           	declare @previousDesc nvarchar(512);
|  |  |  |  |  |  |  |  |  |  |           	declare @previousUrl nvarchar(max);
|  |  |  |  |  |  |  |  |  |  |           	declare @newName nvarchar(256);
|  |  |  |  |  |  |  |  |  |  |           	declare @newDesc nvarchar(512);
|  |  |  |  |  |  |  |  |  |  |           	declare @newUrl nvarchar(max);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousName = (select [Name] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           	set @previousDesc = (select [Desc] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           	set @previousUrl = (select [Url] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@Name = null)
|  |  |  |  |  |  |  |  |  |  |           		set @Name = @previousName;
|  |  |  |  |  |  |  |  |  |  |           		
|  |  |  |  |  |  |  |  |  |  |           	if (@Desc = null)
|  |  |  |  |  |  |  |  |  |  |           		set @Desc = @previousDesc;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@Url = null)
|  |  |  |  |  |  |  |  |  |  |           		set @Url = @previousUrl;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tProduct set [Name] = @Name where ProductId = @ProductId;
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tProduct set [Desc] = @Desc where ProductId = @ProductId;
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tProduct set [Url] = @Url where ProductId = @ProductId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @newName = (select [Name] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           	set @newDesc = (select [Desc] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           	set @newUrl = (select [Url] from ITIH.tProduct where ProductId = @ProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@newName != @previousName or @newDesc != @previousDesc or @newUrl != @previousUrl)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectTypeCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectTypeCreate') is not null drop Procedure ITIH.sProjectTypeCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProjectTypeCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@Name nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@ProjectTypeIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tProjectType ([Name]) values (@Name);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @ProjectTypeIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sUserAvatarCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sUserAvatarCreate') is not null drop Procedure ITIH.sUserAvatarCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sUserAvatarCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@Url nvarchar(max),
|  |  |  |  |  |  |  |  |  |  |           	@UserAvatarIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tUserAvatars (UserId, [Url])
|  |  |  |  |  |  |  |  |  |  |           		values (@UserId, @Url);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @UserAvatarIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sUserDetailsCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sUserDetailsCreate') is not null drop Procedure ITIH.sUserDetailsCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sUserDetailsCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@FirstName nvarchar(126),
|  |  |  |  |  |  |  |  |  |  |           	@LastName nvarchar(126),
|  |  |  |  |  |  |  |  |  |  |           	@BirthDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@UserDetailsIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tUserDetails (UserId, FirstName, LastName, BirthDate)
|  |  |  |  |  |  |  |  |  |  |           		values (@UserId, @FirstName, @LastName, @BirthDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @UserDetailsIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sUserDetailsUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sUserDetailsUpdate') is not null drop Procedure ITIH.sUserDetailsUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sUserDetailsUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@FirstName nvarchar(128),
|  |  |  |  |  |  |  |  |  |  |           	@LastName nvarchar(128),
|  |  |  |  |  |  |  |  |  |  |           	@BirthDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           	UPDATE ITIH.tUserDetails SET FirstName = @FirstName WHERE UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           	UPDATE ITIH.tUserDetails SET LastName = @LastName WHERE UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           	UPDATE ITIH.tUserDetails SET BirthDate = @BirthDate WHERE UserId = @UserId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vUserProfile (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vUserProfile') is not null drop View ITIH.vUserProfile;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vUserProfile
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		UserId = ud.UserId,
|  |  |  |  |  |  |  |  |  |  |           		UserName = u.UserName,
|  |  |  |  |  |  |  |  |  |  |           		Firstname = ud.FirstName,
|  |  |  |  |  |  |  |  |  |  |           		Lastname = ud.LastName
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tUserDetails ud
|  |  |  |  |  |  |  |  |  |  |           		join CK.tUser u on u.UserId = ud.UserId
|  |  |  |  |  |  |  |  |  |  |           	where ud.UserId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectTypeTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SchoolMemberTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserAvatarsTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserDetailsTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SemesterTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sSchoolMemberCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sSchoolMemberCreate') is not null drop Procedure ITIH.sSchoolMemberCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sSchoolMemberCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@SchoolStatusId int,
|  |  |  |  |  |  |  |  |  |  |           	@SchoolMemberIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tSchoolMember (UserId, SchoolStatusId)
|  |  |  |  |  |  |  |  |  |  |           		values (@UserId, @SchoolStatusId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @SchoolMemberIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vSchoolMembers (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vSchoolMembers') is not null drop View ITIH.vSchoolMembers;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vSchoolMembers
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		UserId = sm.UserId,
|  |  |  |  |  |  |  |  |  |  |           		AvatarUrl = ua.[Url],
|  |  |  |  |  |  |  |  |  |  |           		UserName = u.UserName,
|  |  |  |  |  |  |  |  |  |  |           		FirstName = ud.FirstName,
|  |  |  |  |  |  |  |  |  |  |           		LastName = ud.LastName,
|  |  |  |  |  |  |  |  |  |  |           		BirthDate = ud.BirthDate,
|  |  |  |  |  |  |  |  |  |  |           		SchoolMemberId = sm.SchoolMemberId,
|  |  |  |  |  |  |  |  |  |  |           		SchoolStatusId = sm.SchoolStatusId,
|  |  |  |  |  |  |  |  |  |  |           		SchoolStatusName = ss.SchoolStatusName
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tSchoolMember sm
|  |  |  |  |  |  |  |  |  |  |           		left join CK.tUser u on u.UserId = sm.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tUserDetails ud on ud.UserId = sm.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tUserAvatars ua on ua.UserId = sm.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tSchoolStatus ss on ss.SchoolStatusId = sm.SchoolStatusId
|  |  |  |  |  |  |  |  |  |  |           	where sm.SchoolMemberId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SchoolMemberTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sSemesterCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sSemesterCreate') is not null drop Procedure ITIH.sSemesterCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sSemesterCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@Name nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@SemesterIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tSemester ([Name]) values (@Name);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @SemesterIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SemesterTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StudentTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectCreate') is not null drop Procedure ITIH.sProjectCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProjectCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@TypeId int,
|  |  |  |  |  |  |  |  |  |  |           	@SemesterId int,
|  |  |  |  |  |  |  |  |  |  |           	@Name nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@Headline nvarchar(256),
|  |  |  |  |  |  |  |  |  |  |           	@Pitch nvarchar(512),
|  |  |  |  |  |  |  |  |  |  |           	@ProjectIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tProject (TypeId, SemesterId, [Name], Headline, Pitch)
|  |  |  |  |  |  |  |  |  |  |           		values (@TypeId, @SemesterId, @Name, @Headline, @Pitch);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @ProjectIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectDelete (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectDelete') is not null drop Procedure ITIH.sProjectDelete;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProjectDelete (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageId int = 0,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @StorageId = (select StorageId from ITIH.tStorage where ProjectId = @ProjectId);
|  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |           	if (@StorageId != 0)
|  |  |  |  |  |  |  |  |  |  |           		delete from ITIH.tStorageLinkedProduct where StorageId = @StorageId;
|  |  |  |  |  |  |  |  |  |  |           		delete from ITIH.tStorage where StorageId = @StorageId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete from ITIH.tProject where ProjectId = @ProjectId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @DoesIdStillExist int;
|  |  |  |  |  |  |  |  |  |  |           	set @DoesIdStillExist = (select ProjectId from tProject where ProjectId = @ProjectId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@DoesIdStillExist is null)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStudentCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStudentCreate') is not null drop Procedure ITIH.sStudentCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStudentCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@SemesterId int,
|  |  |  |  |  |  |  |  |  |  |           	@StudentIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tStudent (UserId, SemesterId)
|  |  |  |  |  |  |  |  |  |  |           		values (@UserId, @SemesterId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @StudentIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vProjects (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vProjects') is not null drop View ITIH.vProjects;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vProjects
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		ProjectId = p.ProjectId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectTypeId = p.TypeId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectTypeName = typ.[Name],
|  |  |  |  |  |  |  |  |  |  |           		ProjectName = p.[Name],
|  |  |  |  |  |  |  |  |  |  |           		ProjectHeadline = p.Headline,
|  |  |  |  |  |  |  |  |  |  |           		ProjectPitch = p.Pitch,
|  |  |  |  |  |  |  |  |  |  |           		SemesterId = p.SemesterId,
|  |  |  |  |  |  |  |  |  |  |           		SemesterName = sem.[Name],
|  |  |  |  |  |  |  |  |  |  |           		StorageId = case when (p.SemesterId < 4) then 0 else sto.StorageId end,
|  |  |  |  |  |  |  |  |  |  |           		OpenedStall = case when (p.SemesterId < 4) then 0 else sto.OpenedStall end
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tProject p
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tProjectType typ on typ.TypeId = p.TypeId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tSemester sem on sem.SemesterId = p.SemesterId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tStorage sto on sto.ProjectId = p.ProjectId
|  |  |  |  |  |  |  |  |  |  |           	where p.ProjectId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StudentTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectMemberTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectVotesTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserBalanceTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectMemberCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectMemberCreate') is not null drop Procedure ITIH.sProjectMemberCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create procedure ITIH.sProjectMemberCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectRankId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectMemberIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tProjectMember (ProjectId, ProjectRankId, UserId)
|  |  |  |  |  |  |  |  |  |  |           		values (@ProjectId, @ProjectRankId, @UserId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @ProjectMemberIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectMemberDelete (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectMemberDelete') is not null drop Procedure ITIH.sProjectMemberDelete;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProjectMemberDelete (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectMemberId int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |           	declare @stillExisting int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete from ITIH.tProjectMember where ProjectMemberId = @ProjectMemberId;
|  |  |  |  |  |  |  |  |  |  |           	set @stillExisting = (select ProjectMemberId from ITIH.tProjectMember where ProjectMemberId = @ProjectMemberId);
|  |  |  |  |  |  |  |  |  |  |           	
|  |  |  |  |  |  |  |  |  |  |           	if (@stillExisting is null)
|  |  |  |  |  |  |  |  |  |  |           		begin; 
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sProjectVoteCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sProjectVoteCreate') is not null drop Procedure ITIH.sProjectVoteCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sProjectVoteCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@Note int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectVoteIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tProjectVotes (ProjectId, UserId, Note)
|  |  |  |  |  |  |  |  |  |  |           		values (@ProjectId, @UserId, @Note);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @ProjectVoteIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStallUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStallUpdate') is not null drop Procedure ITIH.sStallUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig:{}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStallUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageId int,
|  |  |  |  |  |  |  |  |  |  |           	@OpenedStall bit,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousState bit;
|  |  |  |  |  |  |  |  |  |  |           	declare @newState bit;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousState = (select OpenedStall from ITIH.tStorage where StorageId = @StorageId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tStorage set OpenedStall = @OpenedStall where StorageId = @StorageId;
|  |  |  |  |  |  |  |  |  |  |           	set @newState = (select OpenedStall from ITIH.tStorage where StorageId = @StorageId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousState != @newState)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStorageCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStorageCreate') is not null drop Procedure ITIH.sStorageCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig:{}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStorageCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tStorage (ProjectId) values (@ProjectId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @StorageIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sUserBalanceCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sUserBalanceCreate') is not null drop Procedure ITIH.sUserBalanceCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig:{}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sUserBalanceCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserBalanceId int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tUserBalance (UserId, ProjectId) values (@UserId, @ProjectId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @UserBalanceId = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sUserBalanceUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sUserBalanceUpdate') is not null drop Procedure ITIH.sUserBalanceUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig:{}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sUserBalanceUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserBalanceId int,
|  |  |  |  |  |  |  |  |  |  |           	@Amount int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousBalance nvarchar(512);
|  |  |  |  |  |  |  |  |  |  |           	declare @newBalance nvarchar(256);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousBalance = (select Balance from ITIH.tUserBalance where UserBalanceId = @UserBalanceId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tUserBalance set Balance = (@previousBalance + @Amount) where UserBalanceId = @UserBalanceId;
|  |  |  |  |  |  |  |  |  |  |           	set @newBalance = (select Balance from ITIH.tUserBalance where UserBalanceId = @UserBalanceId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousBalance != @newBalance)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vProjectMembers (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vProjectMembers') is not null drop View ITIH.vProjectMembers;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vProjectMembers
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		ProjectMemberId = pm.ProjectMemberId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectId = pm.ProjectId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectName = p.[Name],
|  |  |  |  |  |  |  |  |  |  |           		ProjectRankId = pm.ProjectRankId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectRankName = pr.[Name],
|  |  |  |  |  |  |  |  |  |  |           		UserId = pm.UserId,
|  |  |  |  |  |  |  |  |  |  |           		UserName = u.UserName,
|  |  |  |  |  |  |  |  |  |  |           		AvatarUrl = ua.[Url]
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tProjectMember pm
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tProject p on p.ProjectId = pm.ProjectId
|  |  |  |  |  |  |  |  |  |  |           		left join CK.tUser u on u.UserId = pm.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tProjectRank pr on pr.ProjectRankId = pm.ProjectRankId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tUserAvatars ua on ua.UserId = pm.UserId
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vUserBalance (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vUserBalance') is not null drop View ITIH.vUserBalance;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vUserBalance
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		UserBalanceId = uB.UserBalanceId,
|  |  |  |  |  |  |  |  |  |  |           		ProjectId = uB.ProjectId,
|  |  |  |  |  |  |  |  |  |  |           		UserId = uB.UserId,
|  |  |  |  |  |  |  |  |  |  |           		UserName = u.UserName,
|  |  |  |  |  |  |  |  |  |  |           		FirstName = uD.FirstName,
|  |  |  |  |  |  |  |  |  |  |           		LastName = uD.LastName,
|  |  |  |  |  |  |  |  |  |  |           		AvatarUrl = uA.[Url],
|  |  |  |  |  |  |  |  |  |  |           		Balance = uB.Balance
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tUserBalance uB
|  |  |  |  |  |  |  |  |  |  |           		left join CK.tUser u on u.UserId = uB.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tUserDetails uD on uD.UserId = uB.UserId
|  |  |  |  |  |  |  |  |  |  |           		left join ITIH.tUserAvatars uA on uA.UserId = uB.UserId
|  |  |  |  |  |  |  |  |  |  |           	where uB.UserBalanceId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectMemberTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.ProjectVotesTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.UserBalanceTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageLinkedProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderCreate') is not null drop Procedure ITIH.sOrderCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@ClassroomId int,
|  |  |  |  |  |  |  |  |  |  |           	@CreationDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@OrderIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tOrder (StorageId, UserId, ClassroomId, CreationDate)
|  |  |  |  |  |  |  |  |  |  |           		values (@StorageId, @UserId, @ClassroomId, @CreationDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @OrderIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderDelete (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderDelete') is not null drop Procedure ITIH.sOrderDelete;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderDelete (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderId int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete from tOrderedProduct where OrderId = @OrderId;
|  |  |  |  |  |  |  |  |  |  |           	delete from tOrder where OrderId = @OrderId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @DoesIdStillExist int;
|  |  |  |  |  |  |  |  |  |  |           	set @DoesIdStillExist = (select OrderId from tOrder where OrderId = @OrderId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@DoesIdStillExist is null)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderUpdate') is not null drop Procedure ITIH.sOrderUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderId int,
|  |  |  |  |  |  |  |  |  |  |           	@CurrentState int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @newState int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousState = (select CurrentState from ITIH.tOrder where OrderId = @OrderId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tOrder set CurrentState = @CurrentState where OrderId = @OrderId;
|  |  |  |  |  |  |  |  |  |  |           	set @newState = (select CurrentState from ITIH.tOrder where OrderId = @OrderId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousState != @newstate)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStorageLinkedProductCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStorageLinkedProductCreate') is not null drop Procedure ITIH.sStorageLinkedProductCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStorageLinkedProductCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@UnitPrice int,
|  |  |  |  |  |  |  |  |  |  |           	@Stock int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageLinkedProductIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tStorageLinkedProduct (StorageId, ProductId, UnitPrice, Stock)
|  |  |  |  |  |  |  |  |  |  |           		values (@StorageId, @ProductId, @UnitPrice, @Stock);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @StorageLinkedProductIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStorageLinkedProductCreditStateUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStorageLinkedProductCreditStateUpdate') is not null drop Procedure ITIH.sStorageLinkedProductCreditStateUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStorageLinkedProductCreditStateUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UpdateDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@StorageLinkedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@CreditState bit,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @newState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @SLPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousState = (select CreditState from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tStorageLinkedProduct set CreditState = @CreditState where StorageLinkedProductId = @StorageLinkedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @newState = (select CreditState from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousState != @newState)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tStorageLinkedProductUpdateTrack (UpdateTrackId, StorageLinkedProductId) values (@updateTrack, @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @SLPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tSLPCreditStateUpdateTrack (SLPUpdateTrackId, PreviousCreditState, NewCreditState) values (@SLPUpdateTrack, @previousState, @newState);
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStorageLinkedProductStockUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStorageLinkedProductStockUpdate') is not null drop Procedure ITIH.sStorageLinkedProductStockUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStorageLinkedProductStockUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UpdateDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@StorageLinkedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Stock int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousStock int;
|  |  |  |  |  |  |  |  |  |  |           	declare @newStock int;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @SLPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousStock = (select Stock from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tStorageLinkedProduct set Stock = @Stock where StorageLinkedProductId = @StorageLinkedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @newStock = (select Stock from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@newStock != @previousStock)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tStorageLinkedProductUpdateTrack (UpdateTrackId, StorageLinkedProductId) values (@updateTrack, @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @SLPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tSLPStockUpdateTrack (SLPUpdateTrackId, PreviousStock, NewStock) values (@SLPUpdateTrack, @previousStock, @newStock);
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sStorageLinkedProductUnitPriceUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sStorageLinkedProductUnitPriceUpdate') is not null drop Procedure ITIH.sStorageLinkedProductUnitPriceUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sStorageLinkedProductUnitPriceUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UpdateDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@StorageLinkedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@UnitPrice int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousUnitPrice float;
|  |  |  |  |  |  |  |  |  |  |           	declare @newUnitPrice float;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @SLPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousUnitPrice = (select UnitPrice from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tStorageLinkedProduct set UnitPrice = @UnitPrice where StorageLinkedProductId = @StorageLinkedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @newUnitPrice = (select UnitPrice from ITIH.tStorageLinkedProduct where StorageLinkedProductId = @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@newUnitPrice != @previousUnitPrice)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tStorageLinkedProductUpdateTrack (UpdateTrackId, StorageLinkedProductId) values (@updateTrack, @StorageLinkedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @SLPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tSLPUnitPriceUpdateTrack (SLPUpdateTrackId, PreviousUnitPrice, NewUnitPrice) values (@SLPUpdateTrack, @previousUnitPrice, @newUnitPrice);
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vOrderedProducts (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vOrderedProducts') is not null drop View ITIH.vOrderedProducts;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vOrderedProducts
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		OrderedProductId = op.OrderedProductId,
|  |  |  |  |  |  |  |  |  |  |           		OrderId = op.OrderId,
|  |  |  |  |  |  |  |  |  |  |           		StorageLinkedProductId = slp.StorageLinkedProductId,
|  |  |  |  |  |  |  |  |  |  |           		[Name] = p.[Name],
|  |  |  |  |  |  |  |  |  |  |           		[Desc] = p.[Desc],
|  |  |  |  |  |  |  |  |  |  |           		Quantity = op.Quantity,
|  |  |  |  |  |  |  |  |  |  |           		UnitPrice = slp.UnitPrice,
|  |  |  |  |  |  |  |  |  |  |           		CurrentState = op.CurrentState,
|  |  |  |  |  |  |  |  |  |  |           		PaymentState = op.PaymentState
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tOrderedProduct op
|  |  |  |  |  |  |  |  |  |  |           		join ITIH.tStorageLinkedProduct slp on slp.StorageLinkedProductId = op.StorageLinkedProductId
|  |  |  |  |  |  |  |  |  |  |           		join ITIH.tProduct p on p.ProductId = slp.ProductId
|  |  |  |  |  |  |  |  |  |  |           	where op.OrderId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vOrders (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vOrders') is not null drop View ITIH.vOrders;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vOrders
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		OrderId = o.OrderId,
|  |  |  |  |  |  |  |  |  |  |           		UserId = o.UserId,
|  |  |  |  |  |  |  |  |  |  |           		StorageId = o.StorageId,
|  |  |  |  |  |  |  |  |  |  |           		UserName = u.UserName,
|  |  |  |  |  |  |  |  |  |  |           		ClassroomId = o.ClassroomId,
|  |  |  |  |  |  |  |  |  |  |           		ClassroomName = c.[Name],
|  |  |  |  |  |  |  |  |  |  |           		CreationDate = o.CreationDate,
|  |  |  |  |  |  |  |  |  |  |           		CurrentState = o.CurrentState
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tOrder o
|  |  |  |  |  |  |  |  |  |  |           		join CK.tUser u on u.UserId = o.UserId
|  |  |  |  |  |  |  |  |  |  |           		join ITIH.tClassroom c on c.ClassroomId = o.ClassroomId
|  |  |  |  |  |  |  |  |  |  |           	where OrderId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.vStorageLinkedProducts (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.vStorageLinkedProducts') is not null drop View ITIH.vStorageLinkedProducts;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           create view ITIH.vStorageLinkedProducts
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           	select
|  |  |  |  |  |  |  |  |  |  |           		StorageLinkedProductId = slp.StorageLinkedProductId,
|  |  |  |  |  |  |  |  |  |  |           		StorageId = slp.StorageId,
|  |  |  |  |  |  |  |  |  |  |           		ProductId = slp.ProductId,
|  |  |  |  |  |  |  |  |  |  |           		ProductName = p.[Name],
|  |  |  |  |  |  |  |  |  |  |           		ProductDesc = p.[Desc],
|  |  |  |  |  |  |  |  |  |  |           		ProductAvatarUrl = p.[Url],
|  |  |  |  |  |  |  |  |  |  |           		UnitPrice = slp.UnitPrice,
|  |  |  |  |  |  |  |  |  |  |           		Stock = slp.Stock,
|  |  |  |  |  |  |  |  |  |  |           		CreditState = slp.CreditState
|  |  |  |  |  |  |  |  |  |  |           	from ITIH.tStorageLinkedProduct slp
|  |  |  |  |  |  |  |  |  |  |           		join ITIH.tProduct p on p.ProductId = slp.ProductId
|  |  |  |  |  |  |  |  |  |  |           	where slp.StorageLinkedProductId <> 0;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageLinkedProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderedProductTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderFinalDueTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageLinkedProductUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderedProductCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderedProductCreate') is not null drop Procedure ITIH.sOrderedProductCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           --SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderedProductCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderId int,
|  |  |  |  |  |  |  |  |  |  |           	@StorageLinkedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Quantity int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tOrderedProduct (OrderId, StorageLinkedProductId, Quantity)
|  |  |  |  |  |  |  |  |  |  |           		values (@OrderId, @StorageLinkedProductId, @Quantity);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @OrderedProductId = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderedProductCurrentStateUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderedProductCurrentStateUpdate') is not null drop Procedure ITIH.sOrderedProductCurrentStateUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderedProductCurrentStateUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UpdateDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@CurrentState int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @newState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @OPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousState = (select CurrentState from tOrderedProduct where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           	update tOrderedProduct set CurrentState = @CurrentState where OrderedProductId = @OrderedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @newState = (select CurrentState from tOrderedProduct where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousState != @newState)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOrderedProductUpdateTrack (UpdateTrackId, OrderedProductId) values (@updateTrack, @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @OPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOPCurrentStateUpdateTrack (OPUpdateTrackId, PreviousState, NewState) values (@OPUpdateTrack, @previousState, @newState);
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderedProductDelete (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderedProductDelete') is not null drop Procedure ITIH.sOrderedProductDelete;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderedProductDelete (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete from tOrderedProduct where OrderedProductId = @OrderedProductId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @DoesIdStillExist int;
|  |  |  |  |  |  |  |  |  |  |           	set @DoesIdStillExist = 
|  |  |  |  |  |  |  |  |  |  |           		(select OrderedProductId 
|  |  |  |  |  |  |  |  |  |  |           			from tOrderedProduct
|  |  |  |  |  |  |  |  |  |  |           			where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@DoesIdStillExist is null)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderedProductPaymentStateUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderedProductPaymentStateUpdate') is not null drop Procedure ITIH.sOrderedProductPaymentStateUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderedProductPaymentStateUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@UpdateDate datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderFinalDueId int,
|  |  |  |  |  |  |  |  |  |  |           	@PaymentState int,
|  |  |  |  |  |  |  |  |  |  |           	@Amount int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @newState int;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @OPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousState = (select PaymentState from tOrderedProduct where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           	update tOrderedProduct set PaymentState = @PaymentState where OrderedProductId = @OrderedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @newState = (select PaymentState from tOrderedProduct where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousState != @newState)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOrderedProductUpdateTrack (UpdateTrackId, OrderedProductId) values (@updateTrack, @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @OPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOPPaymentStateUpdateTrack (OPUpdateTrackId, PreviousState, NewState) values (@OPUpdateTrack, @previousState, @newState);
|  |  |  |  |  |  |  |  |  |  |           			
|  |  |  |  |  |  |  |  |  |  |           			if (@PaymentState = 1)
|  |  |  |  |  |  |  |  |  |  |           				insert into ITIH.tOrderPayment (OrderedProductId, OrderFinalDueId, Amount, PaymentTime) values (@OrderedProductId, @OrderFinalDueId, @Amount, @UpdateDate);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			update ITIH.tOrderFinalDue 
|  |  |  |  |  |  |  |  |  |  |           				set Paid = 
|  |  |  |  |  |  |  |  |  |  |           					((select Paid from ITIH.tOrderFinalDue where OrderFinalDueId = @OrderFinalDueId) + @Amount)
|  |  |  |  |  |  |  |  |  |  |           				where OrderFinalDueId = @OrderFinalDueId;
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderFinalDueCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderFinalDueCreate') is not null drop Procedure ITIH.sOrderFinalDueCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderFinalDueCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderId int,
|  |  |  |  |  |  |  |  |  |  |           	@Total int,
|  |  |  |  |  |  |  |  |  |  |           	@Paid int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderFinalDueIdResult int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tOrderFinalDue (OrderId, Total, Paid)
|  |  |  |  |  |  |  |  |  |  |           		values (@OrderId, @Total, @Paid);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @OrderFinalDueIdResult = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderFinalDueUpdate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderFinalDueUpdate') is not null drop Procedure ITIH.sOrderFinalDueUpdate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderFinalDueUpdate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderFinalDueId int,
|  |  |  |  |  |  |  |  |  |  |           	@Paid int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @previousPaid float;
|  |  |  |  |  |  |  |  |  |  |           	declare @newPaid float;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @previousPaid = (select Paid from ITIH.tOrderFinalDue where OrderFinalDueId = @OrderFinalDueId);
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tOrderFinalDue set Paid = (@previousPaid + @Paid) where OrderFinalDueId = @OrderFinalDueId;
|  |  |  |  |  |  |  |  |  |  |           	set @newPaid = (select Paid from ITIH.tOrderFinalDue where OrderFinalDueId = @OrderFinalDueId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@previousPaid != @newPaid and @Paid > 0)
|  |  |  |  |  |  |  |  |  |  |           		set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.StorageLinkedProductUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderedProductTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderFinalDueTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPCreditStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPStockUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPUnitPriceUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderCreditTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderedProductUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderPaymentTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPCreditStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPStockUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.SLPUnitPriceUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderedProductUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderCreditCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderCreditCreate') is not null drop Procedure ITIH.sOrderCreditCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderCreditCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@ProjectId int,
|  |  |  |  |  |  |  |  |  |  |           	@UserId int,
|  |  |  |  |  |  |  |  |  |  |           	@Amount int,
|  |  |  |  |  |  |  |  |  |  |           	@CreditTime datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@OrderCreditId int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tOrderCredit (ProjectId, UserId, Amount, CreditTime)
|  |  |  |  |  |  |  |  |  |  |           		values (@ProjectId, @UserId, @Amount, @CreditTime);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @OrderCreditId = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderPaymentCreate (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderPaymentCreate') is not null drop Procedure ITIH.sOrderPaymentCreate;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderPaymentCreate (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderFinalDueId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Amount int,
|  |  |  |  |  |  |  |  |  |  |           	@PaymentTime datetime2,
|  |  |  |  |  |  |  |  |  |  |           	@OrderPaymentId int output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	insert into ITIH.tOrderPayment (OrderFinalDueId, OrderedProductId, Amount, PaymentTime)
|  |  |  |  |  |  |  |  |  |  |           		values (@OrderFinalDueId, @OrderedProductId, @Amount, @PaymentTime);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	set @OrderPaymentId = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.sOrderPaymentDelete (unversioned).
|  |  |  |  |  |  |  |  |  |  |  - Trace: if OBJECT_ID('ITIH.sOrderPaymentDelete') is not null drop Procedure ITIH.sOrderPaymentDelete;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  |           -- SetupConfig: {}
|  |  |  |  |  |  |  |  |  |  |           create proc ITIH.sOrderPaymentDelete (
|  |  |  |  |  |  |  |  |  |  |           	@ActorId int,
|  |  |  |  |  |  |  |  |  |  |           	@OrderedProductId int,
|  |  |  |  |  |  |  |  |  |  |           	@Success bit = 0 output
|  |  |  |  |  |  |  |  |  |  |           )
|  |  |  |  |  |  |  |  |  |  |           as
|  |  |  |  |  |  |  |  |  |  |           begin
|  |  |  |  |  |  |  |  |  |  |           --[=beginsp]
|  |  |  |  |  |  |  |  |  |  |           set nocount on; declare @SPCallTC int = @@TRANCOUNT, @SPCallId sysname; 
|  |  |  |  |  |  |  |  |  |  |           beginsp: if @SPCallTC = 0 begin tran; else begin set @SPCallId = cast(32*cast(@@PROCID as bigint)+@@NESTLEVEL as varchar); save transaction @SPCallId; end begin try
|  |  |  |  |  |  |  |  |  |  |           --[=/beginsp]
|  |  |  |  |  |  |  |  |  |  |           --<PreCreate revert />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	declare @stillExisting int;
|  |  |  |  |  |  |  |  |  |  |           	declare @updateTrack int;
|  |  |  |  |  |  |  |  |  |  |           	declare @OPUpdateTrack int;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	update ITIH.tOrderedProduct set PaymentState = 0 where OrderedProductId = @OrderedProductId;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	delete from ITIH.tOrderPayment where OrderedProductId = @OrderedProductId;
|  |  |  |  |  |  |  |  |  |  |           	set @stillExisting = (select OrderPaymentId from tOrderPayment where OrderedProductId = @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	if (@stillExisting is null)
|  |  |  |  |  |  |  |  |  |  |           		begin;
|  |  |  |  |  |  |  |  |  |  |           			set @Success = 1;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tUpdateTrack (ActorId, UpdateDate) values (@ActorId, sysutcdatetime());
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @updateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOrderedProductUpdateTrack (UpdateTrackId, OrderedProductId) values (@updateTrack, @OrderedProductId);
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           			set @OPUpdateTrack = scope_identity();
|  |  |  |  |  |  |  |  |  |  |           			insert into ITIH.tOPPaymentStateUpdateTrack (OPUpdateTrackId, PreviousState, NewState) values (@OPUpdateTrack, 1, 0);
|  |  |  |  |  |  |  |  |  |  |           		end;
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           	--<PostCreate />
|  |  |  |  |  |  |  |  |  |  |           
|  |  |  |  |  |  |  |  |  |  |           --[=endsp]
|  |  |  |  |  |  |  |  |  |  |           end try
|  |  |  |  |  |  |  |  |  |  |           begin catch if @SPCallTC = 0 rollback; else if XACT_STATE() = 1 rollback transaction @SPCallId; exec CKCore.sErrorRethrow @@ProcId; return -1; end catch;
|  |  |  |  |  |  |  |  |  |  |           endsp: if @SPCallTC = 0 commit; return 0;
|  |  |  |  |  |  |  |  |  |  |           --[=/endsp]
|  |  |  |  |  |  |  |  |  |  |           end;
|  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OPCurrentStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OPPaymentStateUpdateTrackTable.Head (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderCreditTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OrderPaymentTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OPCurrentStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITIH.OPPaymentStateUpdateTrackTable (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^ITI.Human.Data.Package (¤ => 1.0.0).
|  |  |  |  |  |  |  |  |  |  > Info: Installing []db^SqlDatabase (unversioned).
|  |  |  |  |  |  |  |  |  > Info: Settle step.
|  |  |  |  |  |  |  |  |  |  > Trace: Raising Settle setup event.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []CK._g.poco.Factory.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^SqlDatabase.Connection.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.SqlDatabase.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.Actor.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.ActorTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.ActorTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.GroupTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.GroupTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.ActorProfileTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.ActorProfileTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.Actor.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.Auth.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.AuthProviderTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.AuthProviderTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.Auth.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.User.UserGitHub.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.User.UserPassword.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserGitHubTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserPasswordTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserGitHubTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.UserPasswordTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.User.UserGitHub.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.CK.DB.User.UserPassword.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITI.Human.Data.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ClassroomTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectRankTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectTypeTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SchoolStatusTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserAvatarsTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserDetailsTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ClassroomTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectRankTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectTypeTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SchoolStatusTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserAvatarsTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserDetailsTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SchoolMemberTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SemesterTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SchoolMemberTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SemesterTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StudentTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StudentTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectMemberTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectVotesTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserBalanceTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectMemberTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.ProjectVotesTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.UserBalanceTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageLinkedProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageLinkedProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderedProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderFinalDueTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageLinkedProductUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderedProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderFinalDueTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.StorageLinkedProductUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderCreditTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderedProductUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderPaymentTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPCreditStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPStockUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPUnitPriceUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderCreditTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderedProductUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OrderPaymentTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPCreditStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPStockUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.SLPUnitPriceUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OPCurrentStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OPPaymentStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OPCurrentStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITIH.OPPaymentStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.ITI.Human.Data.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^Model.SqlDatabase.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^SqlDatabase.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.Actor.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.ActorTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sActorCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.ActorTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.GroupTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sGroupCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sGroupUserAdd.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sGroupUserRemove.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserUserNameSet.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.vGroup.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.vUser.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sGroupRemoveAllUsers.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserRemoveFromAllGroups.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sGroupDestroy.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserDestroy.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.GroupTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.ActorProfileTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.ActorProfileTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.Actor.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.Auth.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.AuthProviderTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sAuthUserOnLogin.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.vUserAuthProvider.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sAuthProviderRegister.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sAuthUserInfoRead.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.AuthProviderTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.Auth.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserGitHub.Package.Head.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^CK.DB.User.UserGitHub.Package|Settle||1.0.0|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: exec CK.sAuthProviderRegister 1, 'GitHub', 'CK.tUserGitHub', 0, null;
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserPassword.Package.Head.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Executing 'sql|[]db^CK.DB.User.UserPassword.Package|Settle||1.0.1|AutoLabel0'.
|  |  |  |  |  |  |  |  |  |  |  |  - Trace: exec CK.sAuthProviderRegister 1, 'Basic', 'CK.tUserPassword', 0, null;
|  |  |  |  |  |  |  |  |  |  |  |           GO
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserGitHub.Package([]db^CK.vUserAuthProvider).
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserPassword.Package([]db^CK.vUserAuthProvider).
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserGitHubTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserPasswordTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserGitHubDestroy.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserGitHubUCL.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserPasswordDestroy.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserPasswordUCL.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserGitHubTable([]db^CK.sUserDestroy).
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserPasswordTable([]db^CK.sAuthUserOnLogin).
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserPasswordTable([]db^CK.sUserDestroy).
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.vUserAuthProvider#transform.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sAuthUserOnLogin#transform.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.sUserDestroy#transform.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserGitHubTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.UserPasswordTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserGitHub.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^CK.DB.User.UserPassword.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITI.Human.Data.Package.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ClassroomTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectRankTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectTypeTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SchoolStatusTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserAvatarsTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserDetailsTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ClassroomTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectRankTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SchoolStatusTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProductCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProductUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectTypeCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sUserAvatarCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sUserDetailsCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sUserDetailsUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vUserProfile.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectTypeTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SchoolMemberTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserAvatarsTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserDetailsTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SemesterTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sSchoolMemberCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vSchoolMembers.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SchoolMemberTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sSemesterCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SemesterTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StudentTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectDelete.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStudentCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vProjects.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StudentTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectMemberTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectVotesTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserBalanceTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectMemberCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectMemberDelete.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sProjectVoteCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStallUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStorageCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sUserBalanceCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sUserBalanceUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vProjectMembers.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vUserBalance.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectMemberTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.ProjectVotesTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.UserBalanceTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageLinkedProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderDelete.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStorageLinkedProductCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStorageLinkedProductCreditStateUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStorageLinkedProductStockUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sStorageLinkedProductUnitPriceUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vOrderedProducts.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vOrders.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.vStorageLinkedProducts.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageLinkedProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderedProductTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderFinalDueTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageLinkedProductUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderedProductCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderedProductCurrentStateUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderedProductDelete.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderedProductPaymentStateUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderFinalDueCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderFinalDueUpdate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.StorageLinkedProductUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderedProductTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderFinalDueTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPCreditStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPStockUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPUnitPriceUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderCreditTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderedProductUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderPaymentTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPCreditStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPStockUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.SLPUnitPriceUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderedProductUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderCreditCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderPaymentCreate.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.sOrderPaymentDelete.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OPCurrentStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OPPaymentStateUpdateTrackTable.Head.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderCreditTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OrderPaymentTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OPCurrentStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITIH.OPPaymentStateUpdateTrackTable.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^ITI.Human.Data.Package.
|  |  |  |  |  |  |  |  |  |  > Info: Settling []db^SqlDatabase.
|  |  |  |  |  |  |  |  |  |  > Trace: Raising Success setup event.
|  |  |  |  |  |  |  |  |  > Info: Disposing 240 drivers.
|  |  |  |  |  |  |  |  |  > Trace: Raising Disposed setup event.
|  |  |  |  |  |  |  |  |  - Trace: Item '[]db^Model.CK.ActorTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.GroupTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.UserTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.ActorProfileTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.DB.Actor.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.AuthProviderTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.DB.Auth.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.UserGitHubTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.UserPasswordTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.DB.User.UserGitHub.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.CK.DB.User.UserPassword.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ClassroomTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProjectRankTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProjectTypeTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SchoolStatusTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.UpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.UserAvatarsTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.UserDetailsTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SchoolMemberTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SemesterTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProjectTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.StudentTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProjectMemberTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.ProjectVotesTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.StorageTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.UserBalanceTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.StorageLinkedProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderedProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderFinalDueTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.StorageLinkedProductUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderCreditTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderedProductUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OrderPaymentTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SLPCreditStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SLPStockUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.SLPUnitPriceUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OPCurrentStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITIH.OPPaymentStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^Model.ITI.Human.Data.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.ActorTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.GroupTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.UserTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.ActorProfileTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.DB.Actor.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.AuthProviderTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.DB.Auth.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.UserGitHubTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.UserPasswordTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.DB.User.UserGitHub.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^CK.DB.User.UserPassword.Package' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ClassroomTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProjectRankTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SchoolStatusTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.UpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProjectTypeTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.UserAvatarsTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.UserDetailsTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SchoolMemberTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SemesterTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProjectTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.StudentTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProjectMemberTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.ProjectVotesTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.StorageTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.UserBalanceTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.StorageLinkedProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.StorageLinkedProductUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderedProductTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderFinalDueTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SLPCreditStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SLPStockUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.SLPUnitPriceUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderedProductUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderCreditTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OrderPaymentTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OPCurrentStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITIH.OPPaymentStateUpdateTrackTable' is a new one.
|  |  |  |  |  |  |  |  |           Item '[]db^ITI.Human.Data.Package' is a new one.
|  |  |  |  |  |  |  |  > Info: Aspect: CK.SqlServer.Setup.SqlSetupAspect.
|  |  |  |  |  |  |  |  > Info: Executing initial 0 deferred actions.
|  |  |  |  |  |  |  |  < Executed 0 actions.
|  |  |  |  |  |  |  > Info: Generating AppContext assembly (first run).
|  |  |  |  |  |  |  |  > Info: Generating StObj dynamic assembly.
|  |  |  |  |  |  |  |  |  > Info: Generating source code.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.CreateGroupAsync( ISqlCallContext ctx, Int32 actorId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sGroupCreate(@ActorId int, @GroupIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.DestroyGroupAsync( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Boolean forceDestroy = False ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sGroupDestroy(@ActorId int, @GroupId int, @ForceDestroy bit=0)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.AddUserAsync( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Int32 userId ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sGroupUserAdd(@ActorId int, @GroupId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.RemoveUserAsync( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Int32 userId ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sGroupUserRemove(@ActorId int, @GroupId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.RemoveAllUsersAsync( ISqlCallContext ctx, Int32 actorId, Int32 groupId ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sGroupRemoveAllUsers(@ActorId int, @GroupId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.CreateGroup( ISqlCallContext ctx, Int32 actorId ) => Int32.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.DestroyGroup( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Boolean forceDestroy = False ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.AddUser( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.RemoveUser( ISqlCallContext ctx, Int32 actorId, Int32 groupId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method GroupTable.RemoveAllUsers( ISqlCallContext ctx, Int32 actorId, Int32 groupId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.CreateUserAsync( ISqlCallContext ctx, Int32 actorId, String userName ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserCreate(@ActorId int, @UserName nvarchar(255), @UserIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.UserNameSetAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId, String userName ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserUserNameSet(@ActorId int, @UserId int, @UserName nvarchar(127), @Done bit output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.DestroyUserAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserDestroy(@ActorId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.RemoveFromAllGroupsAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserRemoveFromAllGroups(@ActorId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.CreateUser( ISqlCallContext ctx, Int32 actorId, String userName ) => Int32.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.UserNameSet( ISqlCallContext ctx, Int32 actorId, Int32 userId, String userName ) => Boolean.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.DestroyUser( ISqlCallContext ctx, Int32 actorId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserTable.RemoveFromAllGroups( ISqlCallContext ctx, Int32 actorId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method AuthProviderTable.RegisterProviderAsync( ISqlCallContext ctx, Int32 actorId, String providerName, String userProviderSchemaTableName, Boolean isMultiScheme ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sAuthProviderRegister(@ActorId int, @ProviderName varchar(64), @UserProviderSchemaTableName nvarchar(128), @IsMultiScheme bit, @AuthProviderIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method AuthProviderTable.RegisterProvider( ISqlCallContext ctx, Int32 actorId, String providerName, String userProviderSchemaTableName, Boolean isMultiScheme ) => Int32.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method Package.CmdReadUserAuthInfo( Int32 actorId, Int32 userId ) => SqlCommand.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sAuthUserInfoRead(@ActorId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method Package.OnUserLoginAsync( ISqlCallContext ctx, String scheme, DateTime lastLoginTime, Int32 userId, Boolean actualLogin, DateTime loginTimeNow ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sAuthUserOnLogin(@Scheme varchar(64), @LastLoginTime datetime2(2), @UserId int, @ActualLogin bit, @LoginTimeNow datetime2(2), @FailureCode int output, @FailureReason nvarchar(255) output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method Package.OnUserLogin( ISqlCallContext ctx, String scheme, DateTime lastLoginTime, Int32 userId, Boolean actualLogin, DateTime loginTimeNow ) => LoginResult.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserGitHubTable.DestroyGitHubUserAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId, CancellationToken cancellationToken = null ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserGitHubDestroy(@ActorId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserGitHubTable.GitHubUserUCLAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId, IUserGitHubInfo info, UCLMode mode, CancellationToken cancellationToken ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserGitHubUCL(@ActorId int, @UserId int /*input*/output, @GitHubAccountId varchar(36), @Mode int, @UCResult int output, @LoginFailureCode int output, @LoginFailureReason nvarchar(255) output)'.
|  |  |  |  |  |  |  |  |  |  |  - Info: Sql Parameter '@GitHubAccountId varchar(36)' will take its value from the [ParameterSource] 'info.GitHubAccountId' property.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserGitHubTable.DestroyGitHubUser( ISqlCallContext ctx, Int32 actorId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserGitHubTable.UserGitHubUCL( ISqlCallContext ctx, Int32 actorId, Int32 userId, IUserGitHubInfo info, UCLMode mode ) => UCLResult.
|  |  |  |  |  |  |  |  |  |  |  - Info: Sql Parameter '@GitHubAccountId varchar(36)' will take its value from the [ParameterSource] 'info.GitHubAccountId' property.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserPasswordTable.DestroyPasswordUserAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId, CancellationToken cancellationToken = null ) => Task.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserPasswordDestroy(@ActorId int, @UserId int)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserPasswordTable.PasswordUserUCLAsync( ISqlCallContext ctx, Int32 actorId, Int32 userId, Byte[] pwdHash, UCLMode mode, Nullable`1 loginFailureCode = null, CancellationToken cancellationToken = null ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure CK.sUserPasswordUCL(@ActorId int, @UserId int /*input*/output, @PwdHash varbinary(64), @Mode int, @UCResult int output, @LoginFailureCode int /*input*/output, @LoginFailureReason nvarchar(255) output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserPasswordTable.DestroyPasswordUser( ISqlCallContext ctx, Int32 actorId, Int32 userId ).
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserPasswordTable.PasswordUserUCL( ISqlCallContext ctx, Int32 actorId, Int32 userId, Byte[] pwdHash, UCLMode mode, Nullable`1 loginFailureCode ) => UCLResult.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderCreditTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 projectId, Int32 userId, Int32 amount, DateTime creditTime ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderCreditCreate(@ActorId int, @ProjectId int, @UserId int, @Amount int, @CreditTime datetime2, @OrderCreditId int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderedProductTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 orderId, Int32 storageLinkedProductId, Int32 quantity ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderedProductCreate(@ActorId int, @OrderId int, @StorageLinkedProductId int, @Quantity int, @OrderedProductId int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderedProductTable.UpdateCurrentState( ISqlCallContext ctx, Int32 actorId, DateTime updateDate, Int32 orderedProductId, State currentState ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderedProductCurrentStateUpdate(@ActorId int, @UpdateDate datetime2, @OrderedProductId int, @CurrentState int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderedProductTable.UpdatePaymentState( ISqlCallContext ctx, Int32 actorId, DateTime updateDate, Int32 orderedProductId, Int32 orderFinalDueId, Payment paymentState, Int32 amount ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderedProductPaymentStateUpdate(@ActorId int, @UpdateDate datetime2, @OrderedProductId int, @OrderFinalDueId int, @PaymentState int, @Amount int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderedProductTable.Delete( ISqlCallContext ctx, Int32 actorId, Int32 orderedProductId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderedProductDelete(@ActorId int, @OrderedProductId int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderFinalDueTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 orderId, Int32 total, Int32 paid ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderFinalDueCreate(@ActorId int, @OrderId int, @Total int, @Paid int, @OrderFinalDueIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderFinalDueTable.Update( ISqlCallContext ctx, Int32 actorId, Int32 orderFinalDueId, Int32 paid ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderFinalDueUpdate(@ActorId int, @OrderFinalDueId int, @Paid int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderPaymentTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 orderFinalDueId, Int32 orderedProductId, Int32 amount, DateTime paymentTime ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderPaymentCreate(@ActorId int, @OrderFinalDueId int, @OrderedProductId int, @Amount int, @PaymentTime datetime2, @OrderPaymentId int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderPaymentTable.Delete( ISqlCallContext ctx, Int32 actorId, Int32 orderedProductId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderPaymentDelete(@ActorId int, @OrderedProductId int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 storageId, Int32 userId, Int32 classroomId, DateTime creationDate ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderCreate(@ActorId int, @StorageId int, @UserId int, @ClassroomId int, @CreationDate datetime2, @OrderIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderTable.Update( ISqlCallContext ctx, Int32 actorId, Int32 orderId, State currentState ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderUpdate(@ActorId int, @OrderId int, @CurrentState int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method OrderTable.Delete( ISqlCallContext ctx, Int32 actorId, Int32 orderId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sOrderDelete(@ActorId int, @OrderId int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProductTable.Create( ISqlCallContext ctx, Int32 actorId, String name, String desc, String url = null ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProductCreate(@ActorId int, @Name nvarchar(256), @Desc nvarchar(512), @Url nvarchar(max), @ProductIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProductTable.Update( ISqlCallContext ctx, Int32 actorId, Int32 productId, String name, String desc, String url ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProductUpdate(@ActorId int, @ProductId int, @Name nvarchar(256), @Desc nvarchar(512), @Url nvarchar(max), @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectMemberTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 projectId, Int32 projectRankId, Int32 userId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'procedure ITIH.sProjectMemberCreate(@ActorId int, @ProjectId int, @ProjectRankId int, @UserId int, @ProjectMemberIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectMemberTable.Delete( ISqlCallContext ctx, Int32 actorId, Int32 projectMemberId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProjectMemberDelete(@ActorId int, @ProjectMemberId int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 typeId, Int32 semesterId, String name, String headline, String pitch ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProjectCreate(@ActorId int, @TypeId int, @SemesterId int, @Name nvarchar(256), @Headline nvarchar(256), @Pitch nvarchar(512), @ProjectIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectTable.Delete( ISqlCallContext ctx, Int32 actorId, Int32 projectId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProjectDelete(@ActorId int, @ProjectId int, @StorageId int=0, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@StorageId int=0' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  |          Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectTypeTable.Create( ISqlCallContext ctx, Int32 actorId, String name ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProjectTypeCreate(@ActorId int, @Name nvarchar(256), @ProjectTypeIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method ProjectVotesTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 projectId, Int32 userId, Int32 note ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sProjectVoteCreate(@ActorId int, @ProjectId int, @UserId int, @Note int, @ProjectVoteIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method SchoolMemberTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 userId, Int32 schoolStatusId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sSchoolMemberCreate(@ActorId int, @UserId int, @SchoolStatusId int, @SchoolMemberIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method SemesterTable.Create( ISqlCallContext ctx, Int32 actorId, String name ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sSemesterCreate(@ActorId int, @Name nvarchar(256), @SemesterIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageLinkedProductTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 storageId, Int32 productId, Int32 unitPrice, Int32 stock ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStorageLinkedProductCreate(@ActorId int, @StorageId int, @ProductId int, @UnitPrice int, @Stock int, @StorageLinkedProductIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageLinkedProductTable.UpdateUnitPrice( ISqlCallContext ctx, Int32 actorId, DateTime updateDate, Int32 storageLinkedProductId, Int32 unitPrice ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStorageLinkedProductUnitPriceUpdate(@ActorId int, @UpdateDate datetime2, @StorageLinkedProductId int, @UnitPrice int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageLinkedProductTable.UpdateStock( ISqlCallContext ctx, Int32 actorId, DateTime updateDate, Int32 storageLinkedProductId, Int32 stock ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStorageLinkedProductStockUpdate(@ActorId int, @UpdateDate datetime2, @StorageLinkedProductId int, @Stock int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageLinkedProductTable.UpdateCreditState( ISqlCallContext ctx, Int32 actorId, DateTime updateDate, Int32 storageLinkedProductId, Boolean creditState ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStorageLinkedProductCreditStateUpdate(@ActorId int, @UpdateDate datetime2, @StorageLinkedProductId int, @CreditState bit, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 projectId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStorageCreate(@ActorId int, @ProjectId int, @StorageIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StorageTable.UpdateStall( ISqlCallContext ctx, Int32 actorId, Int32 storageId, Boolean openedStall ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStallUpdate(@ActorId int, @StorageId int, @OpenedStall bit, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method StudentTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 userId, Int32 semesterId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sStudentCreate(@ActorId int, @UserId int, @SemesterId int, @StudentIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserAvatarsTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 userId, String url ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sUserAvatarCreate(@ActorId int, @UserId int, @Url nvarchar(max), @UserAvatarIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserBalanceTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 userId, Int32 projectId ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sUserBalanceCreate(@ActorId int, @UserId int, @ProjectId int, @UserBalanceId int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserBalanceTable.Update( ISqlCallContext ctx, Int32 actorId, Int32 userBalanceId, Int32 amount ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sUserBalanceUpdate(@ActorId int, @UserBalanceId int, @Amount int, @Success bit=0 output)'.
|  |  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' is an output parameter but has a default value: if it is used as an input parameter it should be marked as /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Warn: Sql parameter '@Success' in procedure is a pure output parameter that has a default value. If the input matters, it should be marked /*input*/output.
|  |  |  |  |  |  |  |  |  |  |  - Info: Parameter '@Success bit=0 output' will use its default sql value '0'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserDetailsTable.Create( ISqlCallContext ctx, Int32 actorId, Int32 userId, String firstName, String lastName, DateTime birthDate ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sUserDetailsCreate(@ActorId int, @UserId int, @FirstName nvarchar(126), @LastName nvarchar(126), @BirthDate datetime2, @UserDetailsIdResult int output)'.
|  |  |  |  |  |  |  |  |  |  > Info: Generating Method UserDetailsTable.Update( ISqlCallContext ctx, Int32 actorId, Int32 userId, String firstName, String lastName, DateTime birthDate ) => Task`1.
|  |  |  |  |  |  |  |  |  |  |  > Trace: Low level SqlCommand create method for: 'proc ITIH.sUserDetailsUpdate(@ActorId int, @UserId int, @FirstName nvarchar(128), @LastName nvarchar(128), @BirthDate datetime2, @Success bit output)'.
|  |  |  |  |  |  |  |  |  > Info: Compiling source code.
|  |  |  |  |  |  |  |  |  |  - Info: Saved source file: C:\Users\dizy9\AppData\Local\Temp\CKSetup2019-01-18 20h32.43.7331595\CK.StObj.AutoAssembly.dll.0.cs
|  |  |  |  |  |  |  |  |  |          Saved source file: C:\Users\dizy9\AppData\Local\Temp\CKSetup2019-01-18 20h32.43.7331595\CK.StObj.AutoAssembly.dll.1.cs
|  |  |  |  |  |  |  |  |  |  > Info: Code Generation information.
|  |  |  |  |  |  |  |  |  |  |  - Info: Source code generation and compilation succeeded.
|  |  |  |  |  |  |  |  |  |  < Succeeded.
|  |  |  |  |  |  |  |  > Info: Copying generated files to folder: 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\ITI.Human.Data\bin\Debug\net461\'.
|  |  |  |  |  |  |  |  |  - Info: CK.StObj.AutoAssembly.dll.0.cs
|  |  |  |  |  |  |  |  |          CK.StObj.AutoAssembly.dll.1.cs
|  |  |  |  |  |  |  |  |          CK.StObj.AutoAssembly.dll
|  |  |  |  |  |  |  |  > Info: Copying generated files to folder: 'C:\Users\dizy9\OneDrive\Bureau\Intech\S5\Info\ITI-Human\Tests\ITI.Human.Data.Tests\bin\Debug\net461'.
|  |  |  |  |  |  |  |  |  - Info: CK.StObj.AutoAssembly.dll.0.cs
|  |  |  |  |  |  |  |  |          CK.StObj.AutoAssembly.dll.1.cs
|  |  |  |  |  |  |  |  |          CK.StObj.AutoAssembly.dll
|  |  |  |  |  |  |  > Info: Terminating Aspects.
|  |  |  |  |  |  |  |  > Info: Aspect: CK.SqlServer.Setup.SqlSetupAspect.
|  |  |  |  |  |  |  |  > Info: Aspect: CK.Setup.SetupableAspect.
|  |  |  |  |  |  |  |  > Info: Executing initial 0 deferred actions.
|  |  |  |  |  |  |  |  < Executed 0 actions.
|  |  |  |  |  |  |  - Info: No assembly load conflicts.
|  |  |  |  > Trace: Updating signature files.
|  |  |  |  > Info: Deleting temporary Working Directory.
|  |  |  < Succeed
|  |  |  > Info: Closing Store.
|  > Info: Loading StObj map from CK.StObj.AutoAssembly.
|  |  > Info: Loading dynamic 'CK.StObj.AutoAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.
|  |  |  > Info: Initializing CK.DB.Auth.Package : IAuthenticationDatabaseService
|  |  |  < 2 providers: GitHub, Basic
